{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/stores/chat.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {defineStore} from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\n\ntype TClickTimeout = NodeJS.Timeout | null\nexport const useChat = defineStore('chat', {\n  state: () => ({\n    chatList: {},\n    userChat: {\n      messages: [],\n      name: '',\n      description: ''\n    },\n    messageLimit: null,\n    messagesMakeRead: [],\n    messageUpdate: {},\n    messageReplied: {},\n    messageText: '',\n    searchElem: '',\n    messageForwarded: {},\n    showForwardInfo: false,\n    checkboxForwarded: true,\n    showSendWindow: false,\n    messagePinned: {},\n    arrayPin: [],\n    activeChatNav: true,\n    windowWidth: 0,\n    showPinnedWindow: false,\n    showGroupCreate: false,\n    showGroupCreateChoice: false,\n    showVoiceInfo: false,\n    showChatInfo: false,\n    showSettingChat: false,\n    showChatChangeInfo: false,\n    showChatChangeInfoModal: false,\n    showChatCropper: false,\n    showImageChange: false,\n    chatChangeInfo: {\n      name: '',\n      img: '',\n      description: '',\n    },\n    showChangeWindowChat: false,\n    showChatGallery: false,\n    showDragInfo: false,\n    showUploadWindow: false,\n    updateChatName: '',\n    updateDescription: '',\n    voiceTimer: 0,\n    recordingVoice: false,\n    isGroup: false,\n    clickerTimeout: null as TClickTimeout,\n    flag: true,\n    displayChat: 'all',\n    file: '',\n    src: '',\n    signature: '',\n    fileSizeInfo : false,\n    fileReadInfo: false,\n    fileChecked: false,\n    fileUpload: null,\n    results: {\n      coordinates: null,\n      image: null,\n    },\n    focusInput: null,\n  }),\n  getters: {\n    get_chat_list: (state) => state.chatList,\n    get_user_chat: (state) => state.userChat,\n    get_pinned_list: (state) => state.arrayPin\n  },\n  actions: {\n    async loadChatList(params: { page?: number, limit?: number }) {\n      await axios.get(`chat/chat-list?page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.chatList = res.data\n      })\n    },\n    async loadUserChat(params: { id: number, limit: number, page: number }) {\n      await axios.get(`chat/${params.id}?limit=${params.limit}&page=${params.page}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.messageLimit = res.data.messages.length\n        if (res.data.messages) {\n          this.userChat = res.data\n          let new_array = res.data.messages.reverse()\n          let temp = [...new_array]\n          new_array = new_array.map((el: any) => {\n            return new Date(el.created_at).toLocaleDateString()\n          })\n          new_array = [...new Set(new_array)]\n          let new_messages = new_array.map((el: string) => {\n            return {\n              messages: temp.filter(e => {\n                return new Date(e.created_at).toLocaleDateString() == el\n              }),\n              date: el\n            }\n          })\n          this.userChat.messages = new_messages\n        }\n        // else {\n        //   this.userChat.messages = [...res.data.messages.reverse(), ...this.userChat.messages]\n        // }\n      })\n    },\n    async loadPinnedList(params: {id: number, page: number, limit: number }) {\n      await axios.get(`chat/message/pinned-list/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.arrayPin = res.data\n      })\n    },\n\n    async chatUpdate(params: {\n      id: any; update: {\n        name: any,\n        description: any,\n        photo: any\n      }\n    }) {\n      let fd = new FormData();\n      if(this.updateChatName !== this.userChat.name){\n        fd.set('name', params.update.name)\n      }\n      if(this.updateDescription !== this.userChat.description) {\n        fd.set('description', params.update.description)\n      }\n      if(this.fileUpload) {\n        fd.append('photo', params.update.photo, 'image.webp')\n      }\n      await axios.patch(`chat/update/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      })\n    },\n    async chatDelete(params: { id: number }) {\n      await axios.delete(`chat/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n\n      })\n    },\n\n    async createMessage(params: { id: number, text: string, message_id?: number, file?: any }) {\n      let fd = new FormData();\n      if (!this.messageForwarded.id && !this.file) {\n        fd.set('text', params.text)\n      } else if(!this.signature && !this.messageForwarded.id){\n        fd.set('file', params.file)\n      } else if(this.signature && this.file){\n        fd.set('text', params.text)\n        fd.set('file', params.file)\n      } else {\n        fd.set('text', params.text)\n        fd.set('message_id', params.message_id)\n      }\n      await axios.post(`chat/message/create/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res=>{\n        this.messageForwarded = {id: null}\n      })\n    },\n    async updateMessage(params: { id: number, text: any }) {\n      await axios.patch(`chat/message/update/${params.id}`, {\n        text: params.text\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n      })\n    },\n    async deleteMessage(params: { id: number }) {\n      await axios.delete(`chat/message/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n      })\n    },\n    async createChatUser(params: { users: any, user_id: any, name: string, photo: any }) {\n      let fd = new FormData()\n      if (this.isGroup) {\n        fd.set('name', params.name)\n        fd.set('users', params.users)\n        if (typeof params.photo !== 'string') {\n          fd.set('photo', params.photo)\n        }\n      } else {\n        fd.set('user_id', params.user_id)\n      }\n      await axios.post(`chat/create`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.loadChatList()\n      })\n    },\n\n\n\n    async makeRead(params: { messages: any }) {\n      await axios.post(`chat/message/make-read`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.loadChatList()\n      })\n    },\n    async makePinned(params: { messages: any }) {\n      await axios.post(`chat/message/make-pinned`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      })\n    },\n  }\n})\n",
      "start": 1743102871653,
      "end": 1743102872315,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743102872315,
      "end": 1743102872315,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineStore } from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useChat = defineStore(\"chat\", {\n  state: () => ({\n    chatList: {},\n    userChat: {\n      messages: [],\n      name: \"\",\n      description: \"\"\n    },\n    messageLimit: null,\n    messagesMakeRead: [],\n    messageUpdate: {},\n    messageReplied: {},\n    messageText: \"\",\n    searchElem: \"\",\n    messageForwarded: {},\n    showForwardInfo: false,\n    checkboxForwarded: true,\n    showSendWindow: false,\n    messagePinned: {},\n    arrayPin: [],\n    activeChatNav: true,\n    windowWidth: 0,\n    showPinnedWindow: false,\n    showGroupCreate: false,\n    showGroupCreateChoice: false,\n    showVoiceInfo: false,\n    showChatInfo: false,\n    showSettingChat: false,\n    showChatChangeInfo: false,\n    showChatChangeInfoModal: false,\n    showChatCropper: false,\n    showImageChange: false,\n    chatChangeInfo: {\n      name: \"\",\n      img: \"\",\n      description: \"\"\n    },\n    showChangeWindowChat: false,\n    showChatGallery: false,\n    showDragInfo: false,\n    showUploadWindow: false,\n    updateChatName: \"\",\n    updateDescription: \"\",\n    voiceTimer: 0,\n    recordingVoice: false,\n    isGroup: false,\n    clickerTimeout: null,\n    flag: true,\n    displayChat: \"all\",\n    file: \"\",\n    src: \"\",\n    signature: \"\",\n    fileSizeInfo: false,\n    fileReadInfo: false,\n    fileChecked: false,\n    fileUpload: null,\n    results: {\n      coordinates: null,\n      image: null\n    },\n    focusInput: null\n  }),\n  getters: {\n    get_chat_list: (state) => state.chatList,\n    get_user_chat: (state) => state.userChat,\n    get_pinned_list: (state) => state.arrayPin\n  },\n  actions: {\n    async loadChatList(params) {\n      await axios.get(`chat/chat-list?page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.chatList = res.data;\n      });\n    },\n    async loadUserChat(params) {\n      await axios.get(`chat/${params.id}?limit=${params.limit}&page=${params.page}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.messageLimit = res.data.messages.length;\n        if (res.data.messages) {\n          this.userChat = res.data;\n          let new_array = res.data.messages.reverse();\n          let temp = [...new_array];\n          new_array = new_array.map((el) => {\n            return new Date(el.created_at).toLocaleDateString();\n          });\n          new_array = [...new Set(new_array)];\n          let new_messages = new_array.map((el) => {\n            return {\n              messages: temp.filter((e) => {\n                return new Date(e.created_at).toLocaleDateString() == el;\n              }),\n              date: el\n            };\n          });\n          this.userChat.messages = new_messages;\n        }\n      });\n    },\n    async loadPinnedList(params) {\n      await axios.get(`chat/message/pinned-list/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.arrayPin = res.data;\n      });\n    },\n    async chatUpdate(params) {\n      let fd = new FormData();\n      if (this.updateChatName !== this.userChat.name) {\n        fd.set(\"name\", params.update.name);\n      }\n      if (this.updateDescription !== this.userChat.description) {\n        fd.set(\"description\", params.update.description);\n      }\n      if (this.fileUpload) {\n        fd.append(\"photo\", params.update.photo, \"image.webp\");\n      }\n      await axios.patch(`chat/update/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      });\n    },\n    async chatDelete(params) {\n      await axios.delete(`chat/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n      });\n    },\n    async createMessage(params) {\n      let fd = new FormData();\n      if (!this.messageForwarded.id && !this.file) {\n        fd.set(\"text\", params.text);\n      } else if (!this.signature && !this.messageForwarded.id) {\n        fd.set(\"file\", params.file);\n      } else if (this.signature && this.file) {\n        fd.set(\"text\", params.text);\n        fd.set(\"file\", params.file);\n      } else {\n        fd.set(\"text\", params.text);\n        fd.set(\"message_id\", params.message_id);\n      }\n      await axios.post(`chat/message/create/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.messageForwarded = { id: null };\n      });\n    },\n    async updateMessage(params) {\n      await axios.patch(`chat/message/update/${params.id}`, {\n        text: params.text\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n      });\n    },\n    async deleteMessage(params) {\n      await axios.delete(`chat/message/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n      });\n    },\n    async createChatUser(params) {\n      let fd = new FormData();\n      if (this.isGroup) {\n        fd.set(\"name\", params.name);\n        fd.set(\"users\", params.users);\n        if (typeof params.photo !== \"string\") {\n          fd.set(\"photo\", params.photo);\n        }\n      } else {\n        fd.set(\"user_id\", params.user_id);\n      }\n      await axios.post(`chat/create`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.loadChatList();\n      });\n    },\n    async makeRead(params) {\n      await axios.post(`chat/message/make-read`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.loadChatList();\n      });\n    },\n    async makePinned(params) {\n      await axios.post(`chat/message/make-pinned`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      });\n    }\n  }\n});\n",
      "start": 1743102872315,
      "end": 1743102874539,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/projects/nuxt/workix-nuxt-front/stores/chat.ts"
        ],
        "sourcesContent": [
          "import {defineStore} from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\n\ntype TClickTimeout = NodeJS.Timeout | null\nexport const useChat = defineStore('chat', {\n  state: () => ({\n    chatList: {},\n    userChat: {\n      messages: [],\n      name: '',\n      description: ''\n    },\n    messageLimit: null,\n    messagesMakeRead: [],\n    messageUpdate: {},\n    messageReplied: {},\n    messageText: '',\n    searchElem: '',\n    messageForwarded: {},\n    showForwardInfo: false,\n    checkboxForwarded: true,\n    showSendWindow: false,\n    messagePinned: {},\n    arrayPin: [],\n    activeChatNav: true,\n    windowWidth: 0,\n    showPinnedWindow: false,\n    showGroupCreate: false,\n    showGroupCreateChoice: false,\n    showVoiceInfo: false,\n    showChatInfo: false,\n    showSettingChat: false,\n    showChatChangeInfo: false,\n    showChatChangeInfoModal: false,\n    showChatCropper: false,\n    showImageChange: false,\n    chatChangeInfo: {\n      name: '',\n      img: '',\n      description: '',\n    },\n    showChangeWindowChat: false,\n    showChatGallery: false,\n    showDragInfo: false,\n    showUploadWindow: false,\n    updateChatName: '',\n    updateDescription: '',\n    voiceTimer: 0,\n    recordingVoice: false,\n    isGroup: false,\n    clickerTimeout: null as TClickTimeout,\n    flag: true,\n    displayChat: 'all',\n    file: '',\n    src: '',\n    signature: '',\n    fileSizeInfo : false,\n    fileReadInfo: false,\n    fileChecked: false,\n    fileUpload: null,\n    results: {\n      coordinates: null,\n      image: null,\n    },\n    focusInput: null,\n  }),\n  getters: {\n    get_chat_list: (state) => state.chatList,\n    get_user_chat: (state) => state.userChat,\n    get_pinned_list: (state) => state.arrayPin\n  },\n  actions: {\n    async loadChatList(params: { page?: number, limit?: number }) {\n      await axios.get(`chat/chat-list?page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.chatList = res.data\n      })\n    },\n    async loadUserChat(params: { id: number, limit: number, page: number }) {\n      await axios.get(`chat/${params.id}?limit=${params.limit}&page=${params.page}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.messageLimit = res.data.messages.length\n        if (res.data.messages) {\n          this.userChat = res.data\n          let new_array = res.data.messages.reverse()\n          let temp = [...new_array]\n          new_array = new_array.map((el: any) => {\n            return new Date(el.created_at).toLocaleDateString()\n          })\n          new_array = [...new Set(new_array)]\n          let new_messages = new_array.map((el: string) => {\n            return {\n              messages: temp.filter(e => {\n                return new Date(e.created_at).toLocaleDateString() == el\n              }),\n              date: el\n            }\n          })\n          this.userChat.messages = new_messages\n        }\n        // else {\n        //   this.userChat.messages = [...res.data.messages.reverse(), ...this.userChat.messages]\n        // }\n      })\n    },\n    async loadPinnedList(params: {id: number, page: number, limit: number }) {\n      await axios.get(`chat/message/pinned-list/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.arrayPin = res.data\n      })\n    },\n\n    async chatUpdate(params: {\n      id: any; update: {\n        name: any,\n        description: any,\n        photo: any\n      }\n    }) {\n      let fd = new FormData();\n      if(this.updateChatName !== this.userChat.name){\n        fd.set('name', params.update.name)\n      }\n      if(this.updateDescription !== this.userChat.description) {\n        fd.set('description', params.update.description)\n      }\n      if(this.fileUpload) {\n        fd.append('photo', params.update.photo, 'image.webp')\n      }\n      await axios.patch(`chat/update/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      })\n    },\n    async chatDelete(params: { id: number }) {\n      await axios.delete(`chat/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n\n      })\n    },\n\n    async createMessage(params: { id: number, text: string, message_id?: number, file?: any }) {\n      let fd = new FormData();\n      if (!this.messageForwarded.id && !this.file) {\n        fd.set('text', params.text)\n      } else if(!this.signature && !this.messageForwarded.id){\n        fd.set('file', params.file)\n      } else if(this.signature && this.file){\n        fd.set('text', params.text)\n        fd.set('file', params.file)\n      } else {\n        fd.set('text', params.text)\n        fd.set('message_id', params.message_id)\n      }\n      await axios.post(`chat/message/create/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res=>{\n        this.messageForwarded = {id: null}\n      })\n    },\n    async updateMessage(params: { id: number, text: any }) {\n      await axios.patch(`chat/message/update/${params.id}`, {\n        text: params.text\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n      })\n    },\n    async deleteMessage(params: { id: number }) {\n      await axios.delete(`chat/message/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n      })\n    },\n    async createChatUser(params: { users: any, user_id: any, name: string, photo: any }) {\n      let fd = new FormData()\n      if (this.isGroup) {\n        fd.set('name', params.name)\n        fd.set('users', params.users)\n        if (typeof params.photo !== 'string') {\n          fd.set('photo', params.photo)\n        }\n      } else {\n        fd.set('user_id', params.user_id)\n      }\n      await axios.post(`chat/create`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.loadChatList()\n      })\n    },\n\n\n\n    async makeRead(params: { messages: any }) {\n      await axios.post(`chat/message/make-read`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.loadChatList()\n      })\n    },\n    async makePinned(params: { messages: any }) {\n      await axios.post(`chat/message/make-pinned`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      })\n    },\n  }\n})\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1743102874539,
      "end": 1743102874539,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743102874540,
      "end": 1743102874540,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743102874540,
      "end": 1743102874540,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743102874540,
      "end": 1743102874541,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743102874541,
      "end": 1743102874541,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743102874541,
      "end": 1743102874541,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1743102874542,
      "end": 1743102874543,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1743102874542,
      "end": 1743102874543,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1743102874543,
      "end": 1743102874544,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743102874544,
      "end": 1743102874544,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1743102874546,
      "end": 1743102874547,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "result": "import { defineStore } from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useChat = defineStore(\"chat\", {\n  state: () => ({\n    chatList: {},\n    userChat: {\n      messages: [],\n      name: \"\",\n      description: \"\"\n    },\n    messageLimit: null,\n    messagesMakeRead: [],\n    messageUpdate: {},\n    messageReplied: {},\n    messageText: \"\",\n    searchElem: \"\",\n    messageForwarded: {},\n    showForwardInfo: false,\n    checkboxForwarded: true,\n    showSendWindow: false,\n    messagePinned: {},\n    arrayPin: [],\n    activeChatNav: true,\n    windowWidth: 0,\n    showPinnedWindow: false,\n    showGroupCreate: false,\n    showGroupCreateChoice: false,\n    showVoiceInfo: false,\n    showChatInfo: false,\n    showSettingChat: false,\n    showChatChangeInfo: false,\n    showChatChangeInfoModal: false,\n    showChatCropper: false,\n    showImageChange: false,\n    chatChangeInfo: {\n      name: \"\",\n      img: \"\",\n      description: \"\"\n    },\n    showChangeWindowChat: false,\n    showChatGallery: false,\n    showDragInfo: false,\n    showUploadWindow: false,\n    updateChatName: \"\",\n    updateDescription: \"\",\n    voiceTimer: 0,\n    recordingVoice: false,\n    isGroup: false,\n    clickerTimeout: null,\n    flag: true,\n    displayChat: \"all\",\n    file: \"\",\n    src: \"\",\n    signature: \"\",\n    fileSizeInfo: false,\n    fileReadInfo: false,\n    fileChecked: false,\n    fileUpload: null,\n    results: {\n      coordinates: null,\n      image: null\n    },\n    focusInput: null\n  }),\n  getters: {\n    get_chat_list: (state) => state.chatList,\n    get_user_chat: (state) => state.userChat,\n    get_pinned_list: (state) => state.arrayPin\n  },\n  actions: {\n    async loadChatList(params) {\n      await axios.get(`chat/chat-list?page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.chatList = res.data;\n      });\n    },\n    async loadUserChat(params) {\n      await axios.get(`chat/${params.id}?limit=${params.limit}&page=${params.page}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.messageLimit = res.data.messages.length;\n        if (res.data.messages) {\n          this.userChat = res.data;\n          let new_array = res.data.messages.reverse();\n          let temp = [...new_array];\n          new_array = new_array.map((el) => {\n            return new Date(el.created_at).toLocaleDateString();\n          });\n          new_array = [...new Set(new_array)];\n          let new_messages = new_array.map((el) => {\n            return {\n              messages: temp.filter((e) => {\n                return new Date(e.created_at).toLocaleDateString() == el;\n              }),\n              date: el\n            };\n          });\n          this.userChat.messages = new_messages;\n        }\n      });\n    },\n    async loadPinnedList(params) {\n      await axios.get(`chat/message/pinned-list/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.arrayPin = res.data;\n      });\n    },\n    async chatUpdate(params) {\n      let fd = new FormData();\n      if (this.updateChatName !== this.userChat.name) {\n        fd.set(\"name\", params.update.name);\n      }\n      if (this.updateDescription !== this.userChat.description) {\n        fd.set(\"description\", params.update.description);\n      }\n      if (this.fileUpload) {\n        fd.append(\"photo\", params.update.photo, \"image.webp\");\n      }\n      await axios.patch(`chat/update/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      });\n    },\n    async chatDelete(params) {\n      await axios.delete(`chat/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n      });\n    },\n    async createMessage(params) {\n      let fd = new FormData();\n      if (!this.messageForwarded.id && !this.file) {\n        fd.set(\"text\", params.text);\n      } else if (!this.signature && !this.messageForwarded.id) {\n        fd.set(\"file\", params.file);\n      } else if (this.signature && this.file) {\n        fd.set(\"text\", params.text);\n        fd.set(\"file\", params.file);\n      } else {\n        fd.set(\"text\", params.text);\n        fd.set(\"message_id\", params.message_id);\n      }\n      await axios.post(`chat/message/create/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.messageForwarded = { id: null };\n      });\n    },\n    async updateMessage(params) {\n      await axios.patch(`chat/message/update/${params.id}`, {\n        text: params.text\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n      });\n    },\n    async deleteMessage(params) {\n      await axios.delete(`chat/message/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n      });\n    },\n    async createChatUser(params) {\n      let fd = new FormData();\n      if (this.isGroup) {\n        fd.set(\"name\", params.name);\n        fd.set(\"users\", params.users);\n        if (typeof params.photo !== \"string\") {\n          fd.set(\"photo\", params.photo);\n        }\n      } else {\n        fd.set(\"user_id\", params.user_id);\n      }\n      await axios.post(`chat/create`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.loadChatList();\n      });\n    },\n    async makeRead(params) {\n      await axios.post(`chat/message/make-read`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.loadChatList();\n      });\n    },\n    async makePinned(params) {\n      await axios.post(`chat/message/make-pinned`, {\n        messages: params.messages\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      });\n    }\n  }\n});\n",
      "start": 1743102874547,
      "end": 1743102876080,
      "order": "normal",
      "sourcemaps": "{\n  \"version\": 3,\n  \"sources\": [\"D:/projects/nuxt/workix-nuxt-front/stores/chat.ts\"],\n  \"sourcesContent\": [\"import { defineStore } from \\\"pinia\\\";\\nimport axios from \\\"~/composables/axios\\\";\\nimport nuxtStorage from \\\"nuxt-storage/nuxt-storage\\\";\\nexport const useChat = defineStore(\\\"chat\\\", {\\n  state: () => ({\\n    chatList: {},\\n    userChat: {\\n      messages: [],\\n      name: \\\"\\\",\\n      description: \\\"\\\"\\n    },\\n    messageLimit: null,\\n    messagesMakeRead: [],\\n    messageUpdate: {},\\n    messageReplied: {},\\n    messageText: \\\"\\\",\\n    searchElem: \\\"\\\",\\n    messageForwarded: {},\\n    showForwardInfo: false,\\n    checkboxForwarded: true,\\n    showSendWindow: false,\\n    messagePinned: {},\\n    arrayPin: [],\\n    activeChatNav: true,\\n    windowWidth: 0,\\n    showPinnedWindow: false,\\n    showGroupCreate: false,\\n    showGroupCreateChoice: false,\\n    showVoiceInfo: false,\\n    showChatInfo: false,\\n    showSettingChat: false,\\n    showChatChangeInfo: false,\\n    showChatChangeInfoModal: false,\\n    showChatCropper: false,\\n    showImageChange: false,\\n    chatChangeInfo: {\\n      name: \\\"\\\",\\n      img: \\\"\\\",\\n      description: \\\"\\\"\\n    },\\n    showChangeWindowChat: false,\\n    showChatGallery: false,\\n    showDragInfo: false,\\n    showUploadWindow: false,\\n    updateChatName: \\\"\\\",\\n    updateDescription: \\\"\\\",\\n    voiceTimer: 0,\\n    recordingVoice: false,\\n    isGroup: false,\\n    clickerTimeout: null,\\n    flag: true,\\n    displayChat: \\\"all\\\",\\n    file: \\\"\\\",\\n    src: \\\"\\\",\\n    signature: \\\"\\\",\\n    fileSizeInfo: false,\\n    fileReadInfo: false,\\n    fileChecked: false,\\n    fileUpload: null,\\n    results: {\\n      coordinates: null,\\n      image: null\\n    },\\n    focusInput: null\\n  }),\\n  getters: {\\n    get_chat_list: (state) => state.chatList,\\n    get_user_chat: (state) => state.userChat,\\n    get_pinned_list: (state) => state.arrayPin\\n  },\\n  actions: {\\n    async loadChatList(params) {\\n      await axios.get(`chat/chat-list?page=${params.page}&limit=${params.limit}`, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n        this.chatList = res.data;\\n      });\\n    },\\n    async loadUserChat(params) {\\n      await axios.get(`chat/${params.id}?limit=${params.limit}&page=${params.page}`, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n        this.messageLimit = res.data.messages.length;\\n        if (res.data.messages) {\\n          this.userChat = res.data;\\n          let new_array = res.data.messages.reverse();\\n          let temp = [...new_array];\\n          new_array = new_array.map((el) => {\\n            return new Date(el.created_at).toLocaleDateString();\\n          });\\n          new_array = [...new Set(new_array)];\\n          let new_messages = new_array.map((el) => {\\n            return {\\n              messages: temp.filter((e) => {\\n                return new Date(e.created_at).toLocaleDateString() == el;\\n              }),\\n              date: el\\n            };\\n          });\\n          this.userChat.messages = new_messages;\\n        }\\n      });\\n    },\\n    async loadPinnedList(params) {\\n      await axios.get(`chat/message/pinned-list/${params.id}`, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n        this.arrayPin = res.data;\\n      });\\n    },\\n    async chatUpdate(params) {\\n      let fd = new FormData();\\n      if (this.updateChatName !== this.userChat.name) {\\n        fd.set(\\\"name\\\", params.update.name);\\n      }\\n      if (this.updateDescription !== this.userChat.description) {\\n        fd.set(\\\"description\\\", params.update.description);\\n      }\\n      if (this.fileUpload) {\\n        fd.append(\\\"photo\\\", params.update.photo, \\\"image.webp\\\");\\n      }\\n      await axios.patch(`chat/update/${params.id}`, fd, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      });\\n    },\\n    async chatDelete(params) {\\n      await axios.delete(`chat/delete/${params.id}`, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n      });\\n    },\\n    async createMessage(params) {\\n      let fd = new FormData();\\n      if (!this.messageForwarded.id && !this.file) {\\n        fd.set(\\\"text\\\", params.text);\\n      } else if (!this.signature && !this.messageForwarded.id) {\\n        fd.set(\\\"file\\\", params.file);\\n      } else if (this.signature && this.file) {\\n        fd.set(\\\"text\\\", params.text);\\n        fd.set(\\\"file\\\", params.file);\\n      } else {\\n        fd.set(\\\"text\\\", params.text);\\n        fd.set(\\\"message_id\\\", params.message_id);\\n      }\\n      await axios.post(`chat/message/create/${params.id}`, fd, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n        this.messageForwarded = { id: null };\\n      });\\n    },\\n    async updateMessage(params) {\\n      await axios.patch(`chat/message/update/${params.id}`, {\\n        text: params.text\\n      }, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n      });\\n    },\\n    async deleteMessage(params) {\\n      await axios.delete(`chat/message/delete/${params.id}`, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n      });\\n    },\\n    async createChatUser(params) {\\n      let fd = new FormData();\\n      if (this.isGroup) {\\n        fd.set(\\\"name\\\", params.name);\\n        fd.set(\\\"users\\\", params.users);\\n        if (typeof params.photo !== \\\"string\\\") {\\n          fd.set(\\\"photo\\\", params.photo);\\n        }\\n      } else {\\n        fd.set(\\\"user_id\\\", params.user_id);\\n      }\\n      await axios.post(`chat/create`, fd, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n        this.loadChatList();\\n      });\\n    },\\n    async makeRead(params) {\\n      await axios.post(`chat/message/make-read`, {\\n        messages: params.messages\\n      }, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      }).then((res) => {\\n        this.loadChatList();\\n      });\\n    },\\n    async makePinned(params) {\\n      await axios.post(`chat/message/make-pinned`, {\\n        messages: params.messages\\n      }, {\\n        headers: {\\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\\\"token\\\")}`\\n        }\\n      });\\n    }\\n  }\\n});\\n\"],\n  \"mappings\": \"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\",\n  \"names\": []\n}\n"
    },
    {
      "name": "vite:css-post",
      "start": 1743102876080,
      "end": 1743102876080,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743102876080,
      "end": 1743102876080,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743102876080,
      "end": 1743102876081,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743102876081,
      "end": 1743102876081,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1743102876081,
      "end": 1743102876081,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743102876081,
      "end": 1743102876081,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743102876081,
      "end": 1743102876081,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1743102876081,
      "end": 1743102876081,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1743102876081,
      "end": 1743102876081,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1743102876082,
      "end": 1743102876082,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1743102876082,
      "end": 1743102876083,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1743102876084,
      "end": 1743102876084,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1743102876084,
      "end": 1743102876084,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1743102876084,
      "end": 1743102876084,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1743102876084,
      "end": 1743102876084,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1743102876084,
      "end": 1743102876087,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1743102876084,
      "end": 1743102876087,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1743102876087,
      "end": 1743102876087,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1743102876087,
      "end": 1743102876087,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1743102876088,
      "end": 1743102876088,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1743102876088,
      "end": 1743102876088,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1743102876088,
      "end": 1743102876088,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1743102876088,
      "end": 1743102876088,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1743102876088,
      "end": 1743102876088,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743102876088,
      "end": 1743102876089,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743102876089,
      "end": 1743102876089,
      "order": "normal"
    }
  ]
}
