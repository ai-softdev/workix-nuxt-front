{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/stores/users.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import axios from \"~/composables/axios\"\nimport {defineStore} from \"pinia\";\nimport {toast} from \"vue3-toastify\";\nimport {Router} from 'vue-router'\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useUserStore = defineStore('user-list', {\n  state: () => ({\n    user: {\n      id: '',\n      first_name: '',\n      last_name: '',\n      patronymic:'',\n      password: '',\n      email: '',\n      photo_file: '',\n      photo: '',\n      position_id: '',\n      position_name: '',\n      position: [{\n        id: '',\n        name: ''\n      }],\n      role_id: '',\n      role_name: '',\n      role_en: '',\n      role: {\n        id: '',\n        name: ''\n      },\n      phone: '',\n      department: '',\n      company: '',\n      company_id: '',\n      salary: '',\n      date_of_birth: '',\n      permissions: [],\n    },\n    roleList: [],\n    userSearch: {},\n    permissions: [],\n    page: 1\n  }),\n  getters: {\n    get_user_list: (state) => state.user,\n    get_user_search: (state) => state.userSearch,\n    get_position_list: (state) => state.user.position,\n    get_role_list: (state) => state.roleList,\n    get_permission_list: (state) => state.permissions,\n  },\n  actions: {\n    async loadAdminList(params: {\n      page: number,\n      limit: number,\n      query?: any,\n    }) {\n      await axios.get(`/admin/user/company-admin/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n      })\n    },\n    async loadUserList(params: {page: number, limit: number, query?: any}) {\n      await axios.get(`user/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n      })\n    },\n    async loadUser(params: { id: any }) {\n      axios.get(`user/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n      }).catch(e => {\n      })\n    },\n    async searchUser(params: { search: any }) {\n      axios.get(`user/list/my-company?search=${params.search}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.userSearch = res.data\n      })\n    },\n\n\n    async createUser(params: { user: any }) {\n      let formD = new FormData();\n      formD.set('first_name', params.first_name)\n      formD.set('last_name', params.last_name)\n      formD.set('email', params.email)\n      formD.set('password', params.password)\n      formD.set('date_of_birth', params.date_of_birth)\n      formD.set('photo', params.photo)\n      formD.set('phone', params.phone)\n      formD.set('position', params.position)\n      formD.set('role_id', params.role_id)\n      formD.set('patronymic', params.patronymic)\n      formD.set('company_id', params.company_id)\n      formD.set('department_id', params.department_id)\n      if (typeof params.photo !== 'string') {\n        formD.set('photo', params.photo)\n      }\n      axios.post(`user/create`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        this.loadUserList({limit: 5, page: 1, query: ''})\n      }).catch(e => {\n      })\n    },\n    async createAdmin(params: { user: any }) {\n      let formData = new FormData();\n      formData.set('first_name', params.first_name)\n      formData.set('last_name', params.last_name)\n      formData.set('email', params.email)\n      formData.set('password', params.password)\n      formData.set('date_of_birth', params.date_of_birth.toISOString())\n      formData.set('photo', params.photo)\n      formData.set('phone', params.phone)\n      formData.set('position', params.position)\n      formData.set('role_id', params.role_id)\n      formData.set('company_id', params.company_id)\n      formData.set('department_id', params.department_id)\n      if (typeof params.photo !== 'string') {\n        formData.set('photo', params.photo)\n      }\n      axios.post('/admin/user/company-admin/create', formData, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        this.loadUserList({limit: 5, page: 1, query: ''})\n      }).catch(e => {\n      })\n    },\n\n    async update_user(params: { user: any, id: any }) {\n\n      let formD = new FormData();\n      const originalUser = this.user\n\n      if(params.user.first_name !== originalUser.first_name) {\n        formD.set('first_name', params.user.first_name)\n      }\n      if(params.user.last_name !== originalUser.last_name) {\n        formD.set('last_name', params.user.last_name)\n      }\n      if(params.user.phone !== originalUser.phone) {\n        formD.set('phone', params.user.phone)\n      }\n      if(params.user.password !== originalUser.password) {\n        formD.set('password', params.user.password)\n      }\n      if(params.user.salary !== originalUser.salary) {\n        formD.set('salary', params.user.salary)\n      }\n      if(params.user.email !== originalUser.email) {\n        formD.set('email', params.user.email)\n      }\n      if(params.user.date_of_birth !== originalUser.date_of_birth) {\n        formD.set('date_of_birth', params.user.date_of_birth)\n      }\n      if(params.user.passport !== originalUser.passport) {\n        formD.set('password', params.user.password)\n      }\n      if(params.user.department_id !== originalUser.department_id) {\n        formD.set('department_id', params.user.department_id)\n      }\n      if(params.user.position.id !== originalUser.position.id) {\n        formD.set('position', params.user.position.id)\n      }\n      if (params.update_type !== 'current-user' && params.user.permissions_ids !== originalUser.permissions_id) {\n        formD.set('permissions_ids', params.permissions_ids)\n      }\n      if (params.update_type !== 'current-user' && params.user.role_id !== originalUser.role_id) {\n        formD.set('role_id', params.user.role_id)\n\n      }\n      if (typeof params.user.photo === 'string' && params.user.photo !== originalUser.photo) {\n        formD.set('photo', params.user.photo)\n      }\n      await axios.patch(`user/update/${params.id}`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        toast.success('Данные успешно обновлены', {autoClose: 1500, theme: 'auto'})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n\n    async change_permissions(params: { permissions: any[], id: any }) {\n     await axios.post(`user/permission/change-user-permissions/${params.id}`, {\n       permissions: params.permissions,\n     }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user.permissions = response.data\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n\n    async deleteUser(params: { user_id: number | string}, router: Router) {\n      axios.delete(`user/delete/${params.user_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        router.push('/base/users')\n        toast.success('Пользователь успешно удалён', {autoClose: 1500, theme: 'auto'})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n\n    async loadPositionList() {\n      axios.get(`user/position/list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user.position = response.data\n      })\n    },\n\n    async loadRoleList() {\n      axios.get(`user/role/role-list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.roleList = response.data\n      })\n    },\n\n    async loadPermissions() {\n      axios.get(`user/permission/list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.permissions = response.data\n      })\n    }\n  }\n})",
      "start": 1743013053145,
      "end": 1743013053552,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743013053552,
      "end": 1743013053552,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import axios from \"~/composables/axios\";\nimport { defineStore } from \"pinia\";\nimport { toast } from \"vue3-toastify\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useUserStore = defineStore(\"user-list\", {\n  state: () => ({\n    user: {\n      id: \"\",\n      first_name: \"\",\n      last_name: \"\",\n      patronymic: \"\",\n      password: \"\",\n      email: \"\",\n      photo_file: \"\",\n      photo: \"\",\n      position_id: \"\",\n      position_name: \"\",\n      position: [{\n        id: \"\",\n        name: \"\"\n      }],\n      role_id: \"\",\n      role_name: \"\",\n      role_en: \"\",\n      role: {\n        id: \"\",\n        name: \"\"\n      },\n      phone: \"\",\n      department: \"\",\n      company: \"\",\n      company_id: \"\",\n      salary: \"\",\n      date_of_birth: \"\",\n      permissions: []\n    },\n    roleList: [],\n    userSearch: {},\n    permissions: [],\n    page: 1\n  }),\n  getters: {\n    get_user_list: (state) => state.user,\n    get_user_search: (state) => state.userSearch,\n    get_position_list: (state) => state.user.position,\n    get_role_list: (state) => state.roleList,\n    get_permission_list: (state) => state.permissions\n  },\n  actions: {\n    async loadAdminList(params) {\n      await axios.get(`/admin/user/company-admin/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n      });\n    },\n    async loadUserList(params) {\n      await axios.get(`user/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n      });\n    },\n    async loadUser(params) {\n      axios.get(`user/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n      }).catch((e) => {\n      });\n    },\n    async searchUser(params) {\n      axios.get(`user/list/my-company?search=${params.search}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.userSearch = res.data;\n      });\n    },\n    async createUser(params) {\n      let formD = new FormData();\n      formD.set(\"first_name\", params.first_name);\n      formD.set(\"last_name\", params.last_name);\n      formD.set(\"email\", params.email);\n      formD.set(\"password\", params.password);\n      formD.set(\"date_of_birth\", params.date_of_birth);\n      formD.set(\"photo\", params.photo);\n      formD.set(\"phone\", params.phone);\n      formD.set(\"position\", params.position);\n      formD.set(\"role_id\", params.role_id);\n      formD.set(\"patronymic\", params.patronymic);\n      formD.set(\"company_id\", params.company_id);\n      formD.set(\"department_id\", params.department_id);\n      if (typeof params.photo !== \"string\") {\n        formD.set(\"photo\", params.photo);\n      }\n      axios.post(`user/create`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n        this.loadUserList({ limit: 5, page: 1, query: \"\" });\n      }).catch((e) => {\n      });\n    },\n    async createAdmin(params) {\n      let formData = new FormData();\n      formData.set(\"first_name\", params.first_name);\n      formData.set(\"last_name\", params.last_name);\n      formData.set(\"email\", params.email);\n      formData.set(\"password\", params.password);\n      formData.set(\"date_of_birth\", params.date_of_birth.toISOString());\n      formData.set(\"photo\", params.photo);\n      formData.set(\"phone\", params.phone);\n      formData.set(\"position\", params.position);\n      formData.set(\"role_id\", params.role_id);\n      formData.set(\"company_id\", params.company_id);\n      formData.set(\"department_id\", params.department_id);\n      if (typeof params.photo !== \"string\") {\n        formData.set(\"photo\", params.photo);\n      }\n      axios.post(\"/admin/user/company-admin/create\", formData, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n        this.loadUserList({ limit: 5, page: 1, query: \"\" });\n      }).catch((e) => {\n      });\n    },\n    async update_user(params) {\n      let formD = new FormData();\n      const originalUser = this.user;\n      if (params.user.first_name !== originalUser.first_name) {\n        formD.set(\"first_name\", params.user.first_name);\n      }\n      if (params.user.last_name !== originalUser.last_name) {\n        formD.set(\"last_name\", params.user.last_name);\n      }\n      if (params.user.phone !== originalUser.phone) {\n        formD.set(\"phone\", params.user.phone);\n      }\n      if (params.user.password !== originalUser.password) {\n        formD.set(\"password\", params.user.password);\n      }\n      if (params.user.salary !== originalUser.salary) {\n        formD.set(\"salary\", params.user.salary);\n      }\n      if (params.user.email !== originalUser.email) {\n        formD.set(\"email\", params.user.email);\n      }\n      if (params.user.date_of_birth !== originalUser.date_of_birth) {\n        formD.set(\"date_of_birth\", params.user.date_of_birth);\n      }\n      if (params.user.passport !== originalUser.passport) {\n        formD.set(\"password\", params.user.password);\n      }\n      if (params.user.department_id !== originalUser.department_id) {\n        formD.set(\"department_id\", params.user.department_id);\n      }\n      if (params.user.position.id !== originalUser.position.id) {\n        formD.set(\"position\", params.user.position.id);\n      }\n      if (params.update_type !== \"current-user\" && params.user.permissions_ids !== originalUser.permissions_id) {\n        formD.set(\"permissions_ids\", params.permissions_ids);\n      }\n      if (params.update_type !== \"current-user\" && params.user.role_id !== originalUser.role_id) {\n        formD.set(\"role_id\", params.user.role_id);\n      }\n      if (typeof params.user.photo === \"string\" && params.user.photo !== originalUser.photo) {\n        formD.set(\"photo\", params.user.photo);\n      }\n      await axios.patch(`user/update/${params.id}`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n        toast.success(\"Данные успешно обновлены\", { autoClose: 1500, theme: \"auto\" });\n      }).catch((e) => {\n        toast.error(e, { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async change_permissions(params) {\n      await axios.post(`user/permission/change-user-permissions/${params.id}`, {\n        permissions: params.permissions\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user.permissions = response.data;\n      }).catch((e) => {\n        toast.error(e, { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async deleteUser(params, router) {\n      axios.delete(`user/delete/${params.user_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user = response.data;\n        router.push(\"/base/users\");\n        toast.success(\"Пользователь успешно удалён\", { autoClose: 1500, theme: \"auto\" });\n      }).catch((e) => {\n        toast.error(e, { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async loadPositionList() {\n      axios.get(`user/position/list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.user.position = response.data;\n      });\n    },\n    async loadRoleList() {\n      axios.get(`user/role/role-list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.roleList = response.data;\n      });\n    },\n    async loadPermissions() {\n      axios.get(`user/permission/list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.permissions = response.data;\n      });\n    }\n  }\n});\n",
      "start": 1743013053552,
      "end": 1743013054318,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/projects/nuxt/workix-nuxt-front/stores/users.ts"
        ],
        "sourcesContent": [
          "import axios from \"~/composables/axios\"\nimport {defineStore} from \"pinia\";\nimport {toast} from \"vue3-toastify\";\nimport {Router} from 'vue-router'\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useUserStore = defineStore('user-list', {\n  state: () => ({\n    user: {\n      id: '',\n      first_name: '',\n      last_name: '',\n      patronymic:'',\n      password: '',\n      email: '',\n      photo_file: '',\n      photo: '',\n      position_id: '',\n      position_name: '',\n      position: [{\n        id: '',\n        name: ''\n      }],\n      role_id: '',\n      role_name: '',\n      role_en: '',\n      role: {\n        id: '',\n        name: ''\n      },\n      phone: '',\n      department: '',\n      company: '',\n      company_id: '',\n      salary: '',\n      date_of_birth: '',\n      permissions: [],\n    },\n    roleList: [],\n    userSearch: {},\n    permissions: [],\n    page: 1\n  }),\n  getters: {\n    get_user_list: (state) => state.user,\n    get_user_search: (state) => state.userSearch,\n    get_position_list: (state) => state.user.position,\n    get_role_list: (state) => state.roleList,\n    get_permission_list: (state) => state.permissions,\n  },\n  actions: {\n    async loadAdminList(params: {\n      page: number,\n      limit: number,\n      query?: any,\n    }) {\n      await axios.get(`/admin/user/company-admin/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n      })\n    },\n    async loadUserList(params: {page: number, limit: number, query?: any}) {\n      await axios.get(`user/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n      })\n    },\n    async loadUser(params: { id: any }) {\n      axios.get(`user/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n      }).catch(e => {\n      })\n    },\n    async searchUser(params: { search: any }) {\n      axios.get(`user/list/my-company?search=${params.search}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.userSearch = res.data\n      })\n    },\n\n\n    async createUser(params: { user: any }) {\n      let formD = new FormData();\n      formD.set('first_name', params.first_name)\n      formD.set('last_name', params.last_name)\n      formD.set('email', params.email)\n      formD.set('password', params.password)\n      formD.set('date_of_birth', params.date_of_birth)\n      formD.set('photo', params.photo)\n      formD.set('phone', params.phone)\n      formD.set('position', params.position)\n      formD.set('role_id', params.role_id)\n      formD.set('patronymic', params.patronymic)\n      formD.set('company_id', params.company_id)\n      formD.set('department_id', params.department_id)\n      if (typeof params.photo !== 'string') {\n        formD.set('photo', params.photo)\n      }\n      axios.post(`user/create`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        this.loadUserList({limit: 5, page: 1, query: ''})\n      }).catch(e => {\n      })\n    },\n    async createAdmin(params: { user: any }) {\n      let formData = new FormData();\n      formData.set('first_name', params.first_name)\n      formData.set('last_name', params.last_name)\n      formData.set('email', params.email)\n      formData.set('password', params.password)\n      formData.set('date_of_birth', params.date_of_birth.toISOString())\n      formData.set('photo', params.photo)\n      formData.set('phone', params.phone)\n      formData.set('position', params.position)\n      formData.set('role_id', params.role_id)\n      formData.set('company_id', params.company_id)\n      formData.set('department_id', params.department_id)\n      if (typeof params.photo !== 'string') {\n        formData.set('photo', params.photo)\n      }\n      axios.post('/admin/user/company-admin/create', formData, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        this.loadUserList({limit: 5, page: 1, query: ''})\n      }).catch(e => {\n      })\n    },\n\n    async update_user(params: { user: any, id: any }) {\n\n      let formD = new FormData();\n      const originalUser = this.user\n\n      if(params.user.first_name !== originalUser.first_name) {\n        formD.set('first_name', params.user.first_name)\n      }\n      if(params.user.last_name !== originalUser.last_name) {\n        formD.set('last_name', params.user.last_name)\n      }\n      if(params.user.phone !== originalUser.phone) {\n        formD.set('phone', params.user.phone)\n      }\n      if(params.user.password !== originalUser.password) {\n        formD.set('password', params.user.password)\n      }\n      if(params.user.salary !== originalUser.salary) {\n        formD.set('salary', params.user.salary)\n      }\n      if(params.user.email !== originalUser.email) {\n        formD.set('email', params.user.email)\n      }\n      if(params.user.date_of_birth !== originalUser.date_of_birth) {\n        formD.set('date_of_birth', params.user.date_of_birth)\n      }\n      if(params.user.passport !== originalUser.passport) {\n        formD.set('password', params.user.password)\n      }\n      if(params.user.department_id !== originalUser.department_id) {\n        formD.set('department_id', params.user.department_id)\n      }\n      if(params.user.position.id !== originalUser.position.id) {\n        formD.set('position', params.user.position.id)\n      }\n      if (params.update_type !== 'current-user' && params.user.permissions_ids !== originalUser.permissions_id) {\n        formD.set('permissions_ids', params.permissions_ids)\n      }\n      if (params.update_type !== 'current-user' && params.user.role_id !== originalUser.role_id) {\n        formD.set('role_id', params.user.role_id)\n\n      }\n      if (typeof params.user.photo === 'string' && params.user.photo !== originalUser.photo) {\n        formD.set('photo', params.user.photo)\n      }\n      await axios.patch(`user/update/${params.id}`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        toast.success('Данные успешно обновлены', {autoClose: 1500, theme: 'auto'})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n\n    async change_permissions(params: { permissions: any[], id: any }) {\n     await axios.post(`user/permission/change-user-permissions/${params.id}`, {\n       permissions: params.permissions,\n     }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user.permissions = response.data\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n\n    async deleteUser(params: { user_id: number | string}, router: Router) {\n      axios.delete(`user/delete/${params.user_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user = response.data\n        router.push('/base/users')\n        toast.success('Пользователь успешно удалён', {autoClose: 1500, theme: 'auto'})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n\n    async loadPositionList() {\n      axios.get(`user/position/list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.user.position = response.data\n      })\n    },\n\n    async loadRoleList() {\n      axios.get(`user/role/role-list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.roleList = response.data\n      })\n    },\n\n    async loadPermissions() {\n      axios.get(`user/permission/list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.permissions = response.data\n      })\n    }\n  }\n})"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1743013054318,
      "end": 1743013054318,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743013054318,
      "end": 1743013054318,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1743013054319,
      "end": 1743013054319,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013054319,
      "end": 1743013054320,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1743013054320,
      "end": 1743013054321,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743013054321,
      "end": 1743013054321,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743013054321,
      "end": 1743013054321,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743013054321,
      "end": 1743013054321,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743013054322,
      "end": 1743013054322,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743013054323,
      "end": 1743013054323,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1743013054323,
      "end": 1743013054323,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743013054323,
      "end": 1743013054323,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743013054323,
      "end": 1743013054323,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1743013054323,
      "end": 1743013054323,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1743013054323,
      "end": 1743013054323,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1743013054324,
      "end": 1743013054324,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1743013054324,
      "end": 1743013054324,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1743013054325,
      "end": 1743013054325,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1743013054325,
      "end": 1743013054325,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1743013054325,
      "end": 1743013054325,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1743013054325,
      "end": 1743013054325,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1743013054326,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1743013054326,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1743013054330,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1743013054330,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1743013054330,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1743013054330,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1743013054330,
      "end": 1743013054330,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1743013054331,
      "end": 1743013054331,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1743013054331,
      "end": 1743013054332,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743013054332,
      "end": 1743013054332,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743013054332,
      "end": 1743013054332,
      "order": "normal"
    }
  ]
}
