{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/stores/tasks.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {defineStore} from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport {toast} from \"vue3-toastify\";\nimport {Router} from \"vue-router\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useTaskList = defineStore('task-list', {\n  state: () => ({\n    searchList: {},\n    task: {\n      id: '',\n      title: '',\n      description: '',\n      status: '',\n      author_name: '',\n      author_file: '',\n      created_at: '',\n      updates_at: '',\n      deadline: '',\n      author_file_file: '',\n      performers: [],\n      main_performer: {},\n      respondent: {},\n      worth: '',\n      performer_file: [],\n      task_type: ''\n    },\n    stats: {\n      id: '',\n      status: '',\n      count: {}\n    },\n  }),\n  getters: {\n    get_tasks: (state) => state.task,\n    get_task: (state) => state.task,\n    get_stats: (state) => state.stats,\n    get_search_task: (state) => state.searchList\n  },\n  actions: {\n    async loadTasksLists(params: { page: number, limit: number, query?: string | number}) {\n     await axios.get(`task/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.searchList = response.data\n      })\n    },\n    async loadCurrentTask(params: {id: any}){\n       await axios.get(`task/${params.id}`, {\n         headers: {\n           Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n         }\n       }).then(res => {\n         this.task = res.data\n       })\n    },\n    async create_task(params: { task: any, performers: any }) {\n      let formD = new FormData();\n      formD.set('title', params.title)\n      formD.set('description', params.description)\n      formD.append('deadline', params.deadline.toISOString())\n      formD.set('main_performer_id', params.main_performer_id)\n\n      if (Array.isArray(params.performers)) {\n        params.performers.forEach(id => {\n          formD.append('performers', id);\n        });\n      }\n\n      formD.set('worth', params.worth)\n      if (typeof params.author_file_file !== 'string') {\n        for(let i of params.author_file_file){\n          formD.append('author_files', i)\n\n        }\n      }\n      console.log(params.performers)\n      console.log(typeof params.performers)\n      axios.post(`task/create`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadTasksLists({task_type: 'task-list', query: '', limit: 5, page: 1})\n        toast.success('Вы успешно создали задание', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async update_task(params: { task: any }) {\n      let fd = new FormData();\n      fd.set('title', params.task.title)\n      fd.set('description', params.task.description)\n      fd.set('status', params.task.status)\n      fd.set('performers', params.task.performers)\n      fd.set('respondent', params.task.respondent)\n      if (params.task.author_file) {\n        fd.set('author_file', params.task.author_file)\n      }\n      await axios.patch(`task/update/${params.task.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadCurrentTask({id: this.task.id})\n        toast.success('Данные успешно обновлены', {autoClose: 1500, theme: 'auto'})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async addUser_task(params: {id: any, performers: any}){\n      let fd = new FormData()\n      fd.set('performers', params.performers)\n      await axios.patch(`task/add-by-users/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.task = res.data\n        this.loadTasksLists()\n        toast.success('Успешно добавлены', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async deleteUser_task(params: {id: any, user_id: any}) {\n      await axios.patch(`task/remove-user/${params.id}`, {\n        user_id: params.user_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.task = res.data\n        this.loadTasksLists()\n        toast.success('Успешно удалены', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async delete_task(params: {id: any}, router: Router) {\n      await axios.delete(`task/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.task = res.data\n        router.push('/base/tasks').then(res=>{\n          toast.success('Успешно удалён', {theme: 'auto', autoClose: 1500})\n        })\n      })\n    },\n    async loadTasksStats(params: { task_filter: string }) {\n     await axios.get(`task/stats?${params.task_filter}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.stats = response.data\n      })\n    },\n    async taskWatching(params: { task_status: any, id: any, performer_files: any}) {\n      let fd = new FormData()\n      if (typeof params.performer_files !== 'string') {\n        for(let i of params.performer_files){\n          fd.append('performer_files', i)\n        }\n      }\n      await axios.post(`task/${params.task_status}/${params.id}`,fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadCurrentTask({id: params.id})\n        toast.success('Статус успешно изменён', {autoClose: 1500, theme: \"auto\"})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async change_taskStatus(params: { task_status: any, id: any, comment: any}) {\n      let form = new FormData()\n      form.set('comment', params.comment)\n      await axios.post(`task/${params.task_status}/${params.id}`, form , {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadCurrentTask({id: params.id})\n        toast.success('Статус успешно изменён', {autoClose: 1500, theme: \"auto\"})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    }\n  }\n})\n// task/make-performing/id      performer\n// task/make-completed/id       performed {performer_file: FILE}\n// task/make-rejected/id        author {comment: 'asdas'}\n",
      "start": 1746213268992,
      "end": 1746213269119,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746213269119,
      "end": 1746213269119,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineStore } from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport { toast } from \"vue3-toastify\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useTaskList = defineStore(\"task-list\", {\n  state: () => ({\n    searchList: {},\n    task: {\n      id: \"\",\n      title: \"\",\n      description: \"\",\n      status: \"\",\n      author_name: \"\",\n      author_file: \"\",\n      created_at: \"\",\n      updates_at: \"\",\n      deadline: \"\",\n      author_file_file: \"\",\n      performers: [],\n      main_performer: {},\n      respondent: {},\n      worth: \"\",\n      performer_file: [],\n      task_type: \"\"\n    },\n    stats: {\n      id: \"\",\n      status: \"\",\n      count: {}\n    }\n  }),\n  getters: {\n    get_tasks: (state) => state.task,\n    get_task: (state) => state.task,\n    get_stats: (state) => state.stats,\n    get_search_task: (state) => state.searchList\n  },\n  actions: {\n    async loadTasksLists(params) {\n      await axios.get(`task/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.task = response.data;\n        this.searchList = response.data;\n      });\n    },\n    async loadCurrentTask(params) {\n      await axios.get(`task/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.task = res.data;\n      });\n    },\n    async create_task(params) {\n      let formD = new FormData();\n      formD.set(\"title\", params.title);\n      formD.set(\"description\", params.description);\n      formD.append(\"deadline\", params.deadline.toISOString());\n      formD.set(\"main_performer_id\", params.main_performer_id);\n      if (Array.isArray(params.performers)) {\n        params.performers.forEach((id) => {\n          formD.append(\"performers\", id);\n        });\n      }\n      formD.set(\"worth\", params.worth);\n      if (typeof params.author_file_file !== \"string\") {\n        for (let i of params.author_file_file) {\n          formD.append(\"author_files\", i);\n        }\n      }\n      console.log(params.performers);\n      console.log(typeof params.performers);\n      axios.post(`task/create`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.task = response.data;\n        this.loadTasksLists({ task_type: \"task-list\", query: \"\", limit: 5, page: 1 });\n        toast.success(\"Вы успешно создали задание\", { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async update_task(params) {\n      let fd = new FormData();\n      fd.set(\"title\", params.task.title);\n      fd.set(\"description\", params.task.description);\n      fd.set(\"status\", params.task.status);\n      fd.set(\"performers\", params.task.performers);\n      fd.set(\"respondent\", params.task.respondent);\n      if (params.task.author_file) {\n        fd.set(\"author_file\", params.task.author_file);\n      }\n      await axios.patch(`task/update/${params.task.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.task = response.data;\n        this.loadCurrentTask({ id: this.task.id });\n        toast.success(\"Данные успешно обновлены\", { autoClose: 1500, theme: \"auto\" });\n      }).catch((e) => {\n        toast.error(e, { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async addUser_task(params) {\n      let fd = new FormData();\n      fd.set(\"performers\", params.performers);\n      await axios.patch(`task/add-by-users/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.task = res.data;\n        this.loadTasksLists();\n        toast.success(\"Успешно добавлены\", { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async deleteUser_task(params) {\n      await axios.patch(`task/remove-user/${params.id}`, {\n        user_id: params.user_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.task = res.data;\n        this.loadTasksLists();\n        toast.success(\"Успешно удалены\", { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async delete_task(params, router) {\n      await axios.delete(`task/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.task = res.data;\n        router.push(\"/base/tasks\").then((res2) => {\n          toast.success(\"Успешно удалён\", { theme: \"auto\", autoClose: 1500 });\n        });\n      });\n    },\n    async loadTasksStats(params) {\n      await axios.get(`task/stats?${params.task_filter}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.stats = response.data;\n      });\n    },\n    async taskWatching(params) {\n      let fd = new FormData();\n      if (typeof params.performer_files !== \"string\") {\n        for (let i of params.performer_files) {\n          fd.append(\"performer_files\", i);\n        }\n      }\n      await axios.post(`task/${params.task_status}/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.task = response.data;\n        this.loadCurrentTask({ id: params.id });\n        toast.success(\"Статус успешно изменён\", { autoClose: 1500, theme: \"auto\" });\n      }).catch((e) => {\n        toast.error(e, { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async change_taskStatus(params) {\n      let form = new FormData();\n      form.set(\"comment\", params.comment);\n      await axios.post(`task/${params.task_status}/${params.id}`, form, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.task = response.data;\n        this.loadCurrentTask({ id: params.id });\n        toast.success(\"Статус успешно изменён\", { autoClose: 1500, theme: \"auto\" });\n      }).catch((e) => {\n        toast.error(e, { autoClose: 1500, theme: \"auto\" });\n      });\n    }\n  }\n});\n",
      "start": 1746213269119,
      "end": 1746213270741,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/projects/nuxt/workix-nuxt-front/stores/tasks.ts"
        ],
        "sourcesContent": [
          "import {defineStore} from \"pinia\";\nimport axios from \"~/composables/axios\";\nimport {toast} from \"vue3-toastify\";\nimport {Router} from \"vue-router\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useTaskList = defineStore('task-list', {\n  state: () => ({\n    searchList: {},\n    task: {\n      id: '',\n      title: '',\n      description: '',\n      status: '',\n      author_name: '',\n      author_file: '',\n      created_at: '',\n      updates_at: '',\n      deadline: '',\n      author_file_file: '',\n      performers: [],\n      main_performer: {},\n      respondent: {},\n      worth: '',\n      performer_file: [],\n      task_type: ''\n    },\n    stats: {\n      id: '',\n      status: '',\n      count: {}\n    },\n  }),\n  getters: {\n    get_tasks: (state) => state.task,\n    get_task: (state) => state.task,\n    get_stats: (state) => state.stats,\n    get_search_task: (state) => state.searchList\n  },\n  actions: {\n    async loadTasksLists(params: { page: number, limit: number, query?: string | number}) {\n     await axios.get(`task/list?query=${params.query}&page=${params.page}&limit=${params.limit}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.searchList = response.data\n      })\n    },\n    async loadCurrentTask(params: {id: any}){\n       await axios.get(`task/${params.id}`, {\n         headers: {\n           Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n         }\n       }).then(res => {\n         this.task = res.data\n       })\n    },\n    async create_task(params: { task: any, performers: any }) {\n      let formD = new FormData();\n      formD.set('title', params.title)\n      formD.set('description', params.description)\n      formD.append('deadline', params.deadline.toISOString())\n      formD.set('main_performer_id', params.main_performer_id)\n\n      if (Array.isArray(params.performers)) {\n        params.performers.forEach(id => {\n          formD.append('performers', id);\n        });\n      }\n\n      formD.set('worth', params.worth)\n      if (typeof params.author_file_file !== 'string') {\n        for(let i of params.author_file_file){\n          formD.append('author_files', i)\n\n        }\n      }\n      console.log(params.performers)\n      console.log(typeof params.performers)\n      axios.post(`task/create`, formD, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadTasksLists({task_type: 'task-list', query: '', limit: 5, page: 1})\n        toast.success('Вы успешно создали задание', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async update_task(params: { task: any }) {\n      let fd = new FormData();\n      fd.set('title', params.task.title)\n      fd.set('description', params.task.description)\n      fd.set('status', params.task.status)\n      fd.set('performers', params.task.performers)\n      fd.set('respondent', params.task.respondent)\n      if (params.task.author_file) {\n        fd.set('author_file', params.task.author_file)\n      }\n      await axios.patch(`task/update/${params.task.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadCurrentTask({id: this.task.id})\n        toast.success('Данные успешно обновлены', {autoClose: 1500, theme: 'auto'})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async addUser_task(params: {id: any, performers: any}){\n      let fd = new FormData()\n      fd.set('performers', params.performers)\n      await axios.patch(`task/add-by-users/${params.id}`, fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.task = res.data\n        this.loadTasksLists()\n        toast.success('Успешно добавлены', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async deleteUser_task(params: {id: any, user_id: any}) {\n      await axios.patch(`task/remove-user/${params.id}`, {\n        user_id: params.user_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.task = res.data\n        this.loadTasksLists()\n        toast.success('Успешно удалены', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async delete_task(params: {id: any}, router: Router) {\n      await axios.delete(`task/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.task = res.data\n        router.push('/base/tasks').then(res=>{\n          toast.success('Успешно удалён', {theme: 'auto', autoClose: 1500})\n        })\n      })\n    },\n    async loadTasksStats(params: { task_filter: string }) {\n     await axios.get(`task/stats?${params.task_filter}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.stats = response.data\n      })\n    },\n    async taskWatching(params: { task_status: any, id: any, performer_files: any}) {\n      let fd = new FormData()\n      if (typeof params.performer_files !== 'string') {\n        for(let i of params.performer_files){\n          fd.append('performer_files', i)\n        }\n      }\n      await axios.post(`task/${params.task_status}/${params.id}`,fd, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadCurrentTask({id: params.id})\n        toast.success('Статус успешно изменён', {autoClose: 1500, theme: \"auto\"})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async change_taskStatus(params: { task_status: any, id: any, comment: any}) {\n      let form = new FormData()\n      form.set('comment', params.comment)\n      await axios.post(`task/${params.task_status}/${params.id}`, form , {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        this.task = response.data\n        this.loadCurrentTask({id: params.id})\n        toast.success('Статус успешно изменён', {autoClose: 1500, theme: \"auto\"})\n      }).catch(e => {\n        toast.error(e, {autoClose: 1500, theme: 'auto'})\n      })\n    }\n  }\n})\n// task/make-performing/id      performer\n// task/make-completed/id       performed {performer_file: FILE}\n// task/make-rejected/id        author {comment: 'asdas'}\n"
        ],
        "mappings": "AAAA,SAAQ,mBAAkB;AAC1B,OAAO,WAAW;AAClB,SAAQ,aAAY;AAEpB,OAAO,iBAAiB;AACjB,aAAM,cAAc,YAAY,aAAa;AAAA,EAClD,OAAO,OAAO;AAAA,IACZ,YAAY,CAAC;AAAA,IACb,MAAM;AAAA,MACJ,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,aAAa;AAAA,MACb,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,UAAU;AAAA,MACV,kBAAkB;AAAA,MAClB,YAAY,CAAC;AAAA,MACb,gBAAgB,CAAC;AAAA,MACjB,YAAY,CAAC;AAAA,MACb,OAAO;AAAA,MACP,gBAAgB,CAAC;AAAA,MACjB,WAAW;AAAA,IACb;AAAA,IACA,OAAO;AAAA,MACL,IAAI;AAAA,MACJ,QAAQ;AAAA,MACR,OAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,WAAW,CAAC,UAAU,MAAM;AAAA,IAC5B,UAAU,CAAC,UAAU,MAAM;AAAA,IAC3B,WAAW,CAAC,UAAU,MAAM;AAAA,IAC5B,iBAAiB,CAAC,UAAU,MAAM;AAAA,EACpC;AAAA,EACA,SAAS;AAAA,IACP,MAAM,eAAe,QAAiE;AACrF,YAAM,MAAM,IAAI,mBAAmB,OAAO,KAAK,SAAS,OAAO,IAAI,UAAU,OAAO,KAAK,IAAI;AAAA,QAC1F,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,cAAY;AAClB,aAAK,OAAO,SAAS;AACrB,aAAK,aAAa,SAAS;AAAA,MAC7B,CAAC;AAAA,IACH;AAAA,IACA,MAAM,gBAAgB,QAAkB;AACrC,YAAM,MAAM,IAAI,QAAQ,OAAO,EAAE,IAAI;AAAA,QACnC,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,SAAO;AACb,aAAK,OAAO,IAAI;AAAA,MAClB,CAAC;AAAA,IACJ;AAAA,IACA,MAAM,YAAY,QAAwC;AACxD,UAAI,QAAQ,IAAI,SAAS;AACzB,YAAM,IAAI,SAAS,OAAO,KAAK;AAC/B,YAAM,IAAI,eAAe,OAAO,WAAW;AAC3C,YAAM,OAAO,YAAY,OAAO,SAAS,YAAY,CAAC;AACtD,YAAM,IAAI,qBAAqB,OAAO,iBAAiB;AAEvD,UAAI,MAAM,QAAQ,OAAO,UAAU,GAAG;AACpC,eAAO,WAAW,QAAQ,QAAM;AAC9B,gBAAM,OAAO,cAAc,EAAE;AAAA,QAC/B,CAAC;AAAA,MACH;AAEA,YAAM,IAAI,SAAS,OAAO,KAAK;AAC/B,UAAI,OAAO,OAAO,qBAAqB,UAAU;AAC/C,iBAAQ,KAAK,OAAO,kBAAiB;AACnC,gBAAM,OAAO,gBAAgB,CAAC;AAAA,QAEhC;AAAA,MACF;AACA,cAAQ,IAAI,OAAO,UAAU;AAC7B,cAAQ,IAAI,OAAO,OAAO,UAAU;AACpC,YAAM,KAAK,eAAe,OAAO;AAAA,QAC/B,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,cAAY;AAClB,aAAK,OAAO,SAAS;AACrB,aAAK,eAAe,EAAC,WAAW,aAAa,OAAO,IAAI,OAAO,GAAG,MAAM,EAAC,CAAC;AAC1E,cAAM,QAAQ,8BAA8B,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MAC9E,CAAC;AAAA,IACH;AAAA,IACA,MAAM,YAAY,QAAuB;AACvC,UAAI,KAAK,IAAI,SAAS;AACtB,SAAG,IAAI,SAAS,OAAO,KAAK,KAAK;AACjC,SAAG,IAAI,eAAe,OAAO,KAAK,WAAW;AAC7C,SAAG,IAAI,UAAU,OAAO,KAAK,MAAM;AACnC,SAAG,IAAI,cAAc,OAAO,KAAK,UAAU;AAC3C,SAAG,IAAI,cAAc,OAAO,KAAK,UAAU;AAC3C,UAAI,OAAO,KAAK,aAAa;AAC3B,WAAG,IAAI,eAAe,OAAO,KAAK,WAAW;AAAA,MAC/C;AACA,YAAM,MAAM,MAAM,eAAe,OAAO,KAAK,EAAE,IAAI,IAAI;AAAA,QACrD,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,cAAY;AAClB,aAAK,OAAO,SAAS;AACrB,aAAK,gBAAgB,EAAC,IAAI,KAAK,KAAK,GAAE,CAAC;AACvC,cAAM,QAAQ,4BAA4B,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MAC5E,CAAC,EAAE,MAAM,OAAK;AACZ,cAAM,MAAM,GAAG,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MACjD,CAAC;AAAA,IACH;AAAA,IACA,MAAM,aAAa,QAAmC;AACpD,UAAI,KAAK,IAAI,SAAS;AACtB,SAAG,IAAI,cAAc,OAAO,UAAU;AACtC,YAAM,MAAM,MAAM,qBAAqB,OAAO,EAAE,IAAI,IAAI;AAAA,QACtD,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,SAAO;AACb,aAAK,OAAO,IAAI;AAChB,aAAK,eAAe;AACpB,cAAM,QAAQ,qBAAqB,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MACrE,CAAC;AAAA,IACH;AAAA,IACA,MAAM,gBAAgB,QAAiC;AACrD,YAAM,MAAM,MAAM,oBAAoB,OAAO,EAAE,IAAI;AAAA,QACjD,SAAS,OAAO;AAAA,MAClB,GAAG;AAAA,QACD,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,SAAO;AACb,aAAK,OAAO,IAAI;AAChB,aAAK,eAAe;AACpB,cAAM,QAAQ,mBAAmB,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MACnE,CAAC;AAAA,IACH;AAAA,IACA,MAAM,YAAY,QAAmB,QAAgB;AACnD,YAAM,MAAM,OAAO,eAAe,OAAO,EAAE,IAAI;AAAA,QAC7C,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,SAAO;AACb,aAAK,OAAO,IAAI;AAChB,eAAO,KAAK,aAAa,EAAE,KAAK,CAAAA,SAAK;AACnC,gBAAM,QAAQ,kBAAkB,EAAC,OAAO,QAAQ,WAAW,KAAI,CAAC;AAAA,QAClE,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,IACA,MAAM,eAAe,QAAiC;AACrD,YAAM,MAAM,IAAI,cAAc,OAAO,WAAW,IAAI;AAAA,QACjD,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,cAAY;AAClB,aAAK,QAAQ,SAAS;AAAA,MACxB,CAAC;AAAA,IACH;AAAA,IACA,MAAM,aAAa,QAA4D;AAC7E,UAAI,KAAK,IAAI,SAAS;AACtB,UAAI,OAAO,OAAO,oBAAoB,UAAU;AAC9C,iBAAQ,KAAK,OAAO,iBAAgB;AAClC,aAAG,OAAO,mBAAmB,CAAC;AAAA,QAChC;AAAA,MACF;AACA,YAAM,MAAM,KAAK,QAAQ,OAAO,WAAW,IAAI,OAAO,EAAE,IAAG,IAAI;AAAA,QAC7D,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,cAAY;AAClB,aAAK,OAAO,SAAS;AACrB,aAAK,gBAAgB,EAAC,IAAI,OAAO,GAAE,CAAC;AACpC,cAAM,QAAQ,0BAA0B,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MAC1E,CAAC,EAAE,MAAM,OAAK;AACZ,cAAM,MAAM,GAAG,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MACjD,CAAC;AAAA,IACH;AAAA,IACA,MAAM,kBAAkB,QAAoD;AAC1E,UAAI,OAAO,IAAI,SAAS;AACxB,WAAK,IAAI,WAAW,OAAO,OAAO;AAClC,YAAM,MAAM,KAAK,QAAQ,OAAO,WAAW,IAAI,OAAO,EAAE,IAAI,MAAO;AAAA,QACjE,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,QACpE;AAAA,MACF,CAAC,EAAE,KAAK,cAAY;AAClB,aAAK,OAAO,SAAS;AACrB,aAAK,gBAAgB,EAAC,IAAI,OAAO,GAAE,CAAC;AACpC,cAAM,QAAQ,0BAA0B,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MAC1E,CAAC,EAAE,MAAM,OAAK;AACZ,cAAM,MAAM,GAAG,EAAC,WAAW,MAAM,OAAO,OAAM,CAAC;AAAA,MACjD,CAAC;AAAA,IACH;AAAA,EACF;AACF,CAAC;",
        "names": [
          "res"
        ]
      }
    },
    {
      "name": "vite:json",
      "start": 1746213270741,
      "end": 1746213270741,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746213270742,
      "end": 1746213270742,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746213270742,
      "end": 1746213270742,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746213270742,
      "end": 1746213270742,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746213270742,
      "end": 1746213270742,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746213270742,
      "end": 1746213270742,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746213270743,
      "end": 1746213270743,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746213270743,
      "end": 1746213270743,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746213270743,
      "end": 1746213270744,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746213270744,
      "end": 1746213270744,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746213270744,
      "end": 1746213270745,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746213270746,
      "end": 1746213270746,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746213270746,
      "end": 1746213270746,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746213270747,
      "end": 1746213270747,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746213270751,
      "end": 1746213270752,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746213270754,
      "end": 1746213270755,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746213270755,
      "end": 1746213270755,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746213270755,
      "end": 1746213270755,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746213270756,
      "end": 1746213270756,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746213270756,
      "end": 1746213270756,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746213270756,
      "end": 1746213270756,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746213270757,
      "end": 1746213270757,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746213270757,
      "end": 1746213270757,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746213270764,
      "end": 1746213270764,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746213270764,
      "end": 1746213270764,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746213270766,
      "end": 1746213270766,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746213270766,
      "end": 1746213270767,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746213270771,
      "end": 1746213270780,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746213270771,
      "end": 1746213270780,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746213270780,
      "end": 1746213270780,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746213270780,
      "end": 1746213270780,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746213270781,
      "end": 1746213270781,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746213270781,
      "end": 1746213270781,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1746213270781,
      "end": 1746213270781,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746213270781,
      "end": 1746213270781,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746213270782,
      "end": 1746213270782,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746213270782,
      "end": 1746213270782,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746213270782,
      "end": 1746213270782,
      "order": "normal"
    }
  ]
}
