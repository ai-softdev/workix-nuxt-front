{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/hooks/Node.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import isEqual from 'lodash/isEqual'\nimport {toast} from \"vue3-toastify\";\n\nclass Node {\n    self: any\n    parent: unknown\n    previous: any\n    constructor(self: any, parent = null, previous = null) {\n        this.self = self\n        this.parent = parent\n        this.previous = previous\n    }\n}\n\nexport class LinkedList {\n    head: any\n    tail: any\n    constructor() {\n        this.head = null\n        this.tail = null\n    }\n\n    append(self: any): void {\n        const node = new Node(self)\n        if (this.tail) {\n            this.tail.parent = node\n        }\n        if (!this.head) {\n            this.head = node\n        }\n        this.tail = node\n    }\n\n    delete(value: any) {\n        if (!this.head) {\n            return null\n        }\n        let deletedNode = null\n        while (this.head && isEqual(this.head.self, value)) {\n            deletedNode = this.head\n            this.head = this.head.parent\n        }\n        let currentNode = this.head\n        if (currentNode !== null) {\n            while (currentNode.parent) {\n                if (isEqual(currentNode.parent.self, value)) {\n                    deletedNode = currentNode.parent;\n                    currentNode.parent = currentNode.parent.parent\n                } else {\n                    currentNode = currentNode.parent\n                }\n            }\n        }\n        if (isEqual(this.tail?.self, value)) {\n            this.tail = currentNode;\n        }\n        return deletedNode\n    }\n\n    deleteNodeValue(targetValue: any, removeObject: any): void {\n        let current = this.head\n        while (current) {\n            if (isEqual(current.self, targetValue) && Array.isArray(current.self)) {\n                const indexToRemove = current.self.findIndex((obj: object) => isEqual(obj, removeObject))\n                if (indexToRemove !== -1) {\n                    current.self.splice(indexToRemove, 1)\n                    return\n                }\n            }\n            current = current.parent\n        }\n    }\n\n    replaceNodeValue(targetValue: any, newValue: any): void {\n        let current = this.head\n        while (current) {\n            if (isEqual(current.self, targetValue)) {\n                current.self = newValue\n                return\n            }\n            current = current.parent\n        }\n    }\n\n    addContentToNode(targetValue: any, content: any): void {\n        let current = this.head\n        while (current) {\n            if (isEqual(current.self, targetValue)) {\n                current.self.push(content);\n                return\n            }\n            current = current.parent\n        }\n\n    }\n\n    find(value: any) {\n        if (!this.head) {\n            return null\n        }\n        let currentNode = this.head\n        while (currentNode) {\n            if (isEqual(currentNode.self, value)) {\n                return currentNode\n            }\n            currentNode = currentNode.parent\n        }\n        return null\n    }\n\n    insertAfter(after: any, data: any) {\n        const found = this.find(after)\n        if (!found) {\n            return this\n        }\n        found.next = new Node(data, found.next)\n    }\n\n    swipeIfCondition() {\n        let current = this.head\n\n        while(current && current.parent){\n          if(current.self[0].priority < current.parent.self[0].priority){\n              const tempSelf = current.self;\n              current.self = current.parent.self;\n              current.parent.self = tempSelf;\n\n              const tempParent = current.self.parent;\n              current.self.parent = current.parent.self.parent;\n              current.parent.self.parent = tempParent;\n            toast.info('Пользователь был перемещен', {theme: 'auto', autoClose: 1500})\n          }\n          console.log(current)\n          current = current.parent\n        }\n\n    }\n\n    toArray(): any[] {\n        const nodes: any[] = []\n        let currentNode = this.head\n        while (currentNode) {\n            nodes.push(currentNode)\n            currentNode = currentNode.parent\n        }\n        return nodes\n    }\n}\n",
      "start": 1748415735878,
      "end": 1748415735878,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748415735878,
      "end": 1748415735878,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import isEqual from \"lodash/isEqual\";\nimport { toast } from \"vue3-toastify\";\nclass Node {\n  self;\n  parent;\n  previous;\n  constructor(self, parent = null, previous = null) {\n    this.self = self;\n    this.parent = parent;\n    this.previous = previous;\n  }\n}\nexport class LinkedList {\n  head;\n  tail;\n  constructor() {\n    this.head = null;\n    this.tail = null;\n  }\n  append(self) {\n    const node = new Node(self);\n    if (this.tail) {\n      this.tail.parent = node;\n    }\n    if (!this.head) {\n      this.head = node;\n    }\n    this.tail = node;\n  }\n  delete(value) {\n    if (!this.head) {\n      return null;\n    }\n    let deletedNode = null;\n    while (this.head && isEqual(this.head.self, value)) {\n      deletedNode = this.head;\n      this.head = this.head.parent;\n    }\n    let currentNode = this.head;\n    if (currentNode !== null) {\n      while (currentNode.parent) {\n        if (isEqual(currentNode.parent.self, value)) {\n          deletedNode = currentNode.parent;\n          currentNode.parent = currentNode.parent.parent;\n        } else {\n          currentNode = currentNode.parent;\n        }\n      }\n    }\n    if (isEqual(this.tail?.self, value)) {\n      this.tail = currentNode;\n    }\n    return deletedNode;\n  }\n  deleteNodeValue(targetValue, removeObject) {\n    let current = this.head;\n    while (current) {\n      if (isEqual(current.self, targetValue) && Array.isArray(current.self)) {\n        const indexToRemove = current.self.findIndex((obj) => isEqual(obj, removeObject));\n        if (indexToRemove !== -1) {\n          current.self.splice(indexToRemove, 1);\n          return;\n        }\n      }\n      current = current.parent;\n    }\n  }\n  replaceNodeValue(targetValue, newValue) {\n    let current = this.head;\n    while (current) {\n      if (isEqual(current.self, targetValue)) {\n        current.self = newValue;\n        return;\n      }\n      current = current.parent;\n    }\n  }\n  addContentToNode(targetValue, content) {\n    let current = this.head;\n    while (current) {\n      if (isEqual(current.self, targetValue)) {\n        current.self.push(content);\n        return;\n      }\n      current = current.parent;\n    }\n  }\n  find(value) {\n    if (!this.head) {\n      return null;\n    }\n    let currentNode = this.head;\n    while (currentNode) {\n      if (isEqual(currentNode.self, value)) {\n        return currentNode;\n      }\n      currentNode = currentNode.parent;\n    }\n    return null;\n  }\n  insertAfter(after, data) {\n    const found = this.find(after);\n    if (!found) {\n      return this;\n    }\n    found.next = new Node(data, found.next);\n  }\n  swipeIfCondition() {\n    let current = this.head;\n    while (current && current.parent) {\n      if (current.self[0].priority < current.parent.self[0].priority) {\n        const tempSelf = current.self;\n        current.self = current.parent.self;\n        current.parent.self = tempSelf;\n        const tempParent = current.self.parent;\n        current.self.parent = current.parent.self.parent;\n        current.parent.self.parent = tempParent;\n        toast.info(\"Пользователь был перемещен\", { theme: \"auto\", autoClose: 1500 });\n      }\n      console.log(current);\n      current = current.parent;\n    }\n  }\n  toArray() {\n    const nodes = [];\n    let currentNode = this.head;\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.parent;\n    }\n    return nodes;\n  }\n}\n",
      "start": 1748415735878,
      "end": 1748415735880,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/projects/nuxt/workix-nuxt-front/hooks/Node.ts"
        ],
        "sourcesContent": [
          "import isEqual from 'lodash/isEqual'\nimport {toast} from \"vue3-toastify\";\n\nclass Node {\n    self: any\n    parent: unknown\n    previous: any\n    constructor(self: any, parent = null, previous = null) {\n        this.self = self\n        this.parent = parent\n        this.previous = previous\n    }\n}\n\nexport class LinkedList {\n    head: any\n    tail: any\n    constructor() {\n        this.head = null\n        this.tail = null\n    }\n\n    append(self: any): void {\n        const node = new Node(self)\n        if (this.tail) {\n            this.tail.parent = node\n        }\n        if (!this.head) {\n            this.head = node\n        }\n        this.tail = node\n    }\n\n    delete(value: any) {\n        if (!this.head) {\n            return null\n        }\n        let deletedNode = null\n        while (this.head && isEqual(this.head.self, value)) {\n            deletedNode = this.head\n            this.head = this.head.parent\n        }\n        let currentNode = this.head\n        if (currentNode !== null) {\n            while (currentNode.parent) {\n                if (isEqual(currentNode.parent.self, value)) {\n                    deletedNode = currentNode.parent;\n                    currentNode.parent = currentNode.parent.parent\n                } else {\n                    currentNode = currentNode.parent\n                }\n            }\n        }\n        if (isEqual(this.tail?.self, value)) {\n            this.tail = currentNode;\n        }\n        return deletedNode\n    }\n\n    deleteNodeValue(targetValue: any, removeObject: any): void {\n        let current = this.head\n        while (current) {\n            if (isEqual(current.self, targetValue) && Array.isArray(current.self)) {\n                const indexToRemove = current.self.findIndex((obj: object) => isEqual(obj, removeObject))\n                if (indexToRemove !== -1) {\n                    current.self.splice(indexToRemove, 1)\n                    return\n                }\n            }\n            current = current.parent\n        }\n    }\n\n    replaceNodeValue(targetValue: any, newValue: any): void {\n        let current = this.head\n        while (current) {\n            if (isEqual(current.self, targetValue)) {\n                current.self = newValue\n                return\n            }\n            current = current.parent\n        }\n    }\n\n    addContentToNode(targetValue: any, content: any): void {\n        let current = this.head\n        while (current) {\n            if (isEqual(current.self, targetValue)) {\n                current.self.push(content);\n                return\n            }\n            current = current.parent\n        }\n\n    }\n\n    find(value: any) {\n        if (!this.head) {\n            return null\n        }\n        let currentNode = this.head\n        while (currentNode) {\n            if (isEqual(currentNode.self, value)) {\n                return currentNode\n            }\n            currentNode = currentNode.parent\n        }\n        return null\n    }\n\n    insertAfter(after: any, data: any) {\n        const found = this.find(after)\n        if (!found) {\n            return this\n        }\n        found.next = new Node(data, found.next)\n    }\n\n    swipeIfCondition() {\n        let current = this.head\n\n        while(current && current.parent){\n          if(current.self[0].priority < current.parent.self[0].priority){\n              const tempSelf = current.self;\n              current.self = current.parent.self;\n              current.parent.self = tempSelf;\n\n              const tempParent = current.self.parent;\n              current.self.parent = current.parent.self.parent;\n              current.parent.self.parent = tempParent;\n            toast.info('Пользователь был перемещен', {theme: 'auto', autoClose: 1500})\n          }\n          console.log(current)\n          current = current.parent\n        }\n\n    }\n\n    toArray(): any[] {\n        const nodes: any[] = []\n        let currentNode = this.head\n        while (currentNode) {\n            nodes.push(currentNode)\n            currentNode = currentNode.parent\n        }\n        return nodes\n    }\n}\n"
        ],
        "mappings": "AAAA,OAAO,aAAa;AACpB,SAAQ,aAAY;AAEpB,MAAM,KAAK;AAAA,EACP;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,MAAW,SAAS,MAAM,WAAW,MAAM;AACnD,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,WAAW;AAAA,EACpB;AACJ;AAEO,aAAM,WAAW;AAAA,EACpB;AAAA,EACA;AAAA,EACA,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,OAAO,MAAiB;AACpB,UAAM,OAAO,IAAI,KAAK,IAAI;AAC1B,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,SAAS;AAAA,IACvB;AACA,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO;AAAA,IAChB;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EAEA,OAAO,OAAY;AACf,QAAI,CAAC,KAAK,MAAM;AACZ,aAAO;AAAA,IACX;AACA,QAAI,cAAc;AAClB,WAAO,KAAK,QAAQ,QAAQ,KAAK,KAAK,MAAM,KAAK,GAAG;AAChD,oBAAc,KAAK;AACnB,WAAK,OAAO,KAAK,KAAK;AAAA,IAC1B;AACA,QAAI,cAAc,KAAK;AACvB,QAAI,gBAAgB,MAAM;AACtB,aAAO,YAAY,QAAQ;AACvB,YAAI,QAAQ,YAAY,OAAO,MAAM,KAAK,GAAG;AACzC,wBAAc,YAAY;AAC1B,sBAAY,SAAS,YAAY,OAAO;AAAA,QAC5C,OAAO;AACH,wBAAc,YAAY;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,QAAQ,KAAK,MAAM,MAAM,KAAK,GAAG;AACjC,WAAK,OAAO;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA,EAEA,gBAAgB,aAAkB,cAAyB;AACvD,QAAI,UAAU,KAAK;AACnB,WAAO,SAAS;AACZ,UAAI,QAAQ,QAAQ,MAAM,WAAW,KAAK,MAAM,QAAQ,QAAQ,IAAI,GAAG;AACnE,cAAM,gBAAgB,QAAQ,KAAK,UAAU,CAAC,QAAgB,QAAQ,KAAK,YAAY,CAAC;AACxF,YAAI,kBAAkB,IAAI;AACtB,kBAAQ,KAAK,OAAO,eAAe,CAAC;AACpC;AAAA,QACJ;AAAA,MACJ;AACA,gBAAU,QAAQ;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,iBAAiB,aAAkB,UAAqB;AACpD,QAAI,UAAU,KAAK;AACnB,WAAO,SAAS;AACZ,UAAI,QAAQ,QAAQ,MAAM,WAAW,GAAG;AACpC,gBAAQ,OAAO;AACf;AAAA,MACJ;AACA,gBAAU,QAAQ;AAAA,IACtB;AAAA,EACJ;AAAA,EAEA,iBAAiB,aAAkB,SAAoB;AACnD,QAAI,UAAU,KAAK;AACnB,WAAO,SAAS;AACZ,UAAI,QAAQ,QAAQ,MAAM,WAAW,GAAG;AACpC,gBAAQ,KAAK,KAAK,OAAO;AACzB;AAAA,MACJ;AACA,gBAAU,QAAQ;AAAA,IACtB;AAAA,EAEJ;AAAA,EAEA,KAAK,OAAY;AACb,QAAI,CAAC,KAAK,MAAM;AACZ,aAAO;AAAA,IACX;AACA,QAAI,cAAc,KAAK;AACvB,WAAO,aAAa;AAChB,UAAI,QAAQ,YAAY,MAAM,KAAK,GAAG;AAClC,eAAO;AAAA,MACX;AACA,oBAAc,YAAY;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EAEA,YAAY,OAAY,MAAW;AAC/B,UAAM,QAAQ,KAAK,KAAK,KAAK;AAC7B,QAAI,CAAC,OAAO;AACR,aAAO;AAAA,IACX;AACA,UAAM,OAAO,IAAI,KAAK,MAAM,MAAM,IAAI;AAAA,EAC1C;AAAA,EAEA,mBAAmB;AACf,QAAI,UAAU,KAAK;AAEnB,WAAM,WAAW,QAAQ,QAAO;AAC9B,UAAG,QAAQ,KAAK,CAAC,EAAE,WAAW,QAAQ,OAAO,KAAK,CAAC,EAAE,UAAS;AAC1D,cAAM,WAAW,QAAQ;AACzB,gBAAQ,OAAO,QAAQ,OAAO;AAC9B,gBAAQ,OAAO,OAAO;AAEtB,cAAM,aAAa,QAAQ,KAAK;AAChC,gBAAQ,KAAK,SAAS,QAAQ,OAAO,KAAK;AAC1C,gBAAQ,OAAO,KAAK,SAAS;AAC/B,cAAM,KAAK,8BAA8B,EAAC,OAAO,QAAQ,WAAW,KAAI,CAAC;AAAA,MAC3E;AACA,cAAQ,IAAI,OAAO;AACnB,gBAAU,QAAQ;AAAA,IACpB;AAAA,EAEJ;AAAA,EAEA,UAAiB;AACb,UAAM,QAAe,CAAC;AACtB,QAAI,cAAc,KAAK;AACvB,WAAO,aAAa;AAChB,YAAM,KAAK,WAAW;AACtB,oBAAc,YAAY;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AACJ;",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1748415735880,
      "end": 1748415735880,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748415735880,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748415735880,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-template",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748415735881,
      "end": 1748415735881,
      "order": "normal"
    }
  ]
}
