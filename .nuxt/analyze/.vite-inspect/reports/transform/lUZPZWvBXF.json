{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/node_modules/lodash/isLength.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n",
      "start": 1743013014777,
      "end": 1743013015138,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743013015139,
      "end": 1743013015139,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743013015139,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743013015140,
      "end": 1743013015140,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "/** Used as references for various `Number` constants. */\nimport * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nvar isLength_1 = isLength;\n\nexport default /*@__PURE__*/commonjsHelpers.getDefaultExportFromCjs(isLength_1);\nexport { isLength_1 as __moduleExports };",
      "start": 1743013015140,
      "end": 1743013015141,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;AACA,IAAI,gBAAgB,GAAG,gBAAgB,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,KAAK,EAAE;AACzB,EAAE,OAAO,OAAO,KAAK,IAAI,QAAQ;AACjC,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,gBAAgB,CAAC;AAC9D,CAAC;AACD;IACA,UAAc,GAAG,QAAQ"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743013015141,
      "end": 1743013015141,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743013015141,
      "end": 1743013015141,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1743013015141,
      "end": 1743013015141,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1743013015141,
      "end": 1743013015141,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1743013015141,
      "end": 1743013015141,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1743013015143,
      "end": 1743013015143,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1743013015143,
      "end": 1743013015143,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1743013015143,
      "end": 1743013015143,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1743013015143,
      "end": 1743013015143,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1743013015143,
      "end": 1743013015144,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1743013015144,
      "end": 1743013015144,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1743013015144,
      "end": 1743013015144,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1743013015144,
      "end": 1743013015144,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743013015144,
      "end": 1743013015144,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743013015144,
      "end": 1743013015144,
      "order": "normal"
    }
  ]
}
