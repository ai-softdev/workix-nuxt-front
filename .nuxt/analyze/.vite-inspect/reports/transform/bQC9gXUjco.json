{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/node_modules/@nuxt/ui/dist/runtime/components/elements/Meter.vue",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "<template>\n  <div :class=\"ui.wrapper\" v-bind=\"attrs\">\n    <template v-if=\"indicator || $slots.indicator\">\n      <slot name=\"indicator\" v-bind=\"{ percent, value }\">\n        <div :class=\"indicatorContainerClass\" :style=\"{ width: `${percent}%` }\">\n          <div :class=\"indicatorClass\">\n            {{ Math.round(percent) }}%\n          </div>\n        </div>\n      </slot>\n    </template>\n\n    <meter\n      :value=\"value\"\n      :min=\"normalizedMin\"\n      :max=\"normalizedMax\"\n      :class=\"[meterClass, meterAppearanceClass, meterBarClass]\"\n    />\n\n    <template v-if=\"label || $slots.label\">\n      <slot name=\"label\" v-bind=\"{ percent, value }\">\n        <div :class=\"labelClass\">\n          <UIcon v-if=\"icon\" :name=\"icon\" /> {{ label }}\n        </div>\n      </slot>\n    </template>\n  </div>\n</template>\n\n<script>\nimport { computed, defineComponent, toRef } from \"vue\";\nimport { twJoin } from \"tailwind-merge\";\nimport UIcon from \"./Icon.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { meter } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.meter, meter);\nexport default defineComponent({\n  components: {\n    UIcon\n  },\n  inheritAttrs: false,\n  slots: Object,\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    indicator: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: String,\n      default: () => config.default.size,\n      validator(value) {\n        return Object.keys(config.meter.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup(props) {\n    const { ui, attrs } = useUI(\"meter\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    function clampPercent(value, min, max) {\n      if (min == max) {\n        return value < min ? 0 : 100;\n      }\n      if (min > max) {\n        max = [min, min = max][0];\n      }\n      const percent2 = (value - min) / (max - min) * 100;\n      return Math.max(0, Math.min(100, percent2));\n    }\n    const indicatorContainerClass = computed(() => {\n      return twJoin(\n        ui.value.indicator.container\n      );\n    });\n    const indicatorClass = computed(() => {\n      return twJoin(\n        ui.value.indicator.text,\n        ui.value.indicator.size[props.size]\n      );\n    });\n    const meterClass = computed(() => {\n      return twJoin(\n        ui.value.meter.base,\n        ui.value.meter.background,\n        ui.value.meter.ring,\n        ui.value.meter.rounded,\n        ui.value.meter.shadow,\n        ui.value.color[props.color] ?? ui.value.meter.color.replaceAll(\"{color}\", props.color),\n        ui.value.meter.size[props.size]\n      );\n    });\n    const meterAppearanceClass = computed(() => {\n      return twJoin(\n        ui.value.meter.appearance.inner,\n        ui.value.meter.appearance.meter,\n        ui.value.meter.appearance.bar,\n        ui.value.meter.appearance.value\n      );\n    });\n    const meterBarClass = computed(() => {\n      return twJoin(\n        ui.value.meter.bar.transition,\n        ui.value.meter.bar.ring,\n        ui.value.meter.bar.rounded,\n        ui.value.meter.bar.size[props.size]\n      );\n    });\n    const labelClass = computed(() => {\n      return twJoin(\n        ui.value.label.base,\n        ui.value.label.text,\n        ui.value.color[props.color] ?? ui.value.label.color.replaceAll(\"{color}\", props.color),\n        ui.value.label.size[props.size]\n      );\n    });\n    const normalizedMin = computed(() => props.min > props.max ? props.max : props.min);\n    const normalizedMax = computed(() => props.max < props.min ? props.min : props.max);\n    const percent = computed(() => clampPercent(Number(props.value), normalizedMin.value, normalizedMax.value));\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      indicatorContainerClass,\n      indicatorClass,\n      meterClass,\n      meterAppearanceClass,\n      meterBarClass,\n      labelClass,\n      normalizedMin,\n      normalizedMax,\n      percent\n    };\n  }\n});\n</script>\n",
      "start": 1749812704188,
      "end": 1749812704620,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1749812704620,
      "end": 1749812704620,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1749812704621,
      "end": 1749812704621,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "result": "\nimport { computed, defineComponent, toRef } from \"vue\";\nimport { twJoin } from \"tailwind-merge\";\nimport UIcon from \"./Icon.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { meter } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.meter, meter);\nconst _sfc_main = defineComponent({\n  components: {\n    UIcon\n  },\n  inheritAttrs: false,\n  slots: Object,\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    indicator: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: String,\n      default: () => config.default.size,\n      validator(value) {\n        return Object.keys(config.meter.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup(props) {\n    const { ui, attrs } = useUI(\"meter\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    function clampPercent(value, min, max) {\n      if (min == max) {\n        return value < min ? 0 : 100;\n      }\n      if (min > max) {\n        max = [min, min = max][0];\n      }\n      const percent2 = (value - min) / (max - min) * 100;\n      return Math.max(0, Math.min(100, percent2));\n    }\n    const indicatorContainerClass = computed(() => {\n      return twJoin(\n        ui.value.indicator.container\n      );\n    });\n    const indicatorClass = computed(() => {\n      return twJoin(\n        ui.value.indicator.text,\n        ui.value.indicator.size[props.size]\n      );\n    });\n    const meterClass = computed(() => {\n      return twJoin(\n        ui.value.meter.base,\n        ui.value.meter.background,\n        ui.value.meter.ring,\n        ui.value.meter.rounded,\n        ui.value.meter.shadow,\n        ui.value.color[props.color] ?? ui.value.meter.color.replaceAll(\"{color}\", props.color),\n        ui.value.meter.size[props.size]\n      );\n    });\n    const meterAppearanceClass = computed(() => {\n      return twJoin(\n        ui.value.meter.appearance.inner,\n        ui.value.meter.appearance.meter,\n        ui.value.meter.appearance.bar,\n        ui.value.meter.appearance.value\n      );\n    });\n    const meterBarClass = computed(() => {\n      return twJoin(\n        ui.value.meter.bar.transition,\n        ui.value.meter.bar.ring,\n        ui.value.meter.bar.rounded,\n        ui.value.meter.bar.size[props.size]\n      );\n    });\n    const labelClass = computed(() => {\n      return twJoin(\n        ui.value.label.base,\n        ui.value.label.text,\n        ui.value.color[props.color] ?? ui.value.label.color.replaceAll(\"{color}\", props.color),\n        ui.value.label.size[props.size]\n      );\n    });\n    const normalizedMin = computed(() => props.min > props.max ? props.max : props.min);\n    const normalizedMax = computed(() => props.max < props.min ? props.min : props.max);\n    const percent = computed(() => clampPercent(Number(props.value), normalizedMin.value, normalizedMax.value));\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      indicatorContainerClass,\n      indicatorClass,\n      meterClass,\n      meterAppearanceClass,\n      meterBarClass,\n      labelClass,\n      normalizedMin,\n      normalizedMax,\n      percent\n    };\n  }\n});\n\nimport { normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, mergeProps as _mergeProps, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = [\"value\", \"min\", \"max\"]\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = _resolveComponent(\"UIcon\")\n\n  return (_openBlock(), _createElementBlock(\"div\", _mergeProps({\n    class: _ctx.ui.wrapper\n  }, _ctx.attrs), [\n    (_ctx.indicator || _ctx.$slots.indicator)\n      ? _renderSlot(_ctx.$slots, \"indicator\", _normalizeProps(_mergeProps({ key: 0 }, { percent: _ctx.percent, value: _ctx.value })), () => [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass(_ctx.indicatorContainerClass),\n            style: _normalizeStyle({ width: `${_ctx.percent}%` })\n          }, [\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(_ctx.indicatorClass)\n            }, _toDisplayString(Math.round(_ctx.percent)) + \"% \", 3)\n          ], 6)\n        ])\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"meter\", {\n      value: _ctx.value,\n      min: _ctx.normalizedMin,\n      max: _ctx.normalizedMax,\n      class: _normalizeClass([_ctx.meterClass, _ctx.meterAppearanceClass, _ctx.meterBarClass])\n    }, null, 10, _hoisted_1),\n    (_ctx.label || _ctx.$slots.label)\n      ? _renderSlot(_ctx.$slots, \"label\", _normalizeProps(_mergeProps({ key: 1 }, { percent: _ctx.percent, value: _ctx.value })), () => [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass(_ctx.labelClass)\n          }, [\n            (_ctx.icon)\n              ? (_openBlock(), _createBlock(_component_UIcon, {\n                  key: 0,\n                  name: _ctx.icon\n                }, null, 8, [\"name\"]))\n              : _createCommentVNode(\"\", true),\n            _createTextVNode(\" \" + _toDisplayString(_ctx.label), 1)\n          ], 2)\n        ])\n      : _createCommentVNode(\"\", true)\n  ], 16))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1749812704621,
      "end": 1749812704624,
      "order": "normal",
      "sourcemaps": {
        "mappings": ""
      }
    },
    {
      "name": "vite:vue-jsx",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1749812704624,
      "end": 1749812704624,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "result": "import { default as __nuxt_component_0 } from \"D:/projects/nuxt/workix-nuxt-front/node_modules/@nuxt/ui/dist/runtime/components/elements/Icon.vue\";\n\nimport { computed, defineComponent, toRef } from \"vue\";\nimport { twJoin } from \"tailwind-merge\";\nimport UIcon from \"./Icon.vue\";\nimport { useUI } from \"../../composables/useUI\";\nimport { mergeConfig } from \"../../utils\";\nimport appConfig from \"#build/app.config\";\nimport { meter } from \"#ui/ui.config\";\nconst config = mergeConfig(appConfig.ui.strategy, appConfig.ui.meter, meter);\nconst _sfc_main = defineComponent({\n  components: {\n    UIcon\n  },\n  inheritAttrs: false,\n  slots: Object,\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    min: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 100\n    },\n    indicator: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: null\n    },\n    size: {\n      type: String,\n      default: () => config.default.size,\n      validator(value) {\n        return Object.keys(config.meter.size).includes(value);\n      }\n    },\n    color: {\n      type: String,\n      default: () => config.default.color,\n      validator(value) {\n        return [...appConfig.ui.colors, ...Object.keys(config.color)].includes(value);\n      }\n    },\n    icon: {\n      type: String,\n      default: null\n    },\n    class: {\n      type: [String, Object, Array],\n      default: () => \"\"\n    },\n    ui: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  setup(props) {\n    const { ui, attrs } = useUI(\"meter\", toRef(props, \"ui\"), config, toRef(props, \"class\"));\n    function clampPercent(value, min, max) {\n      if (min == max) {\n        return value < min ? 0 : 100;\n      }\n      if (min > max) {\n        max = [min, min = max][0];\n      }\n      const percent2 = (value - min) / (max - min) * 100;\n      return Math.max(0, Math.min(100, percent2));\n    }\n    const indicatorContainerClass = computed(() => {\n      return twJoin(\n        ui.value.indicator.container\n      );\n    });\n    const indicatorClass = computed(() => {\n      return twJoin(\n        ui.value.indicator.text,\n        ui.value.indicator.size[props.size]\n      );\n    });\n    const meterClass = computed(() => {\n      return twJoin(\n        ui.value.meter.base,\n        ui.value.meter.background,\n        ui.value.meter.ring,\n        ui.value.meter.rounded,\n        ui.value.meter.shadow,\n        ui.value.color[props.color] ?? ui.value.meter.color.replaceAll(\"{color}\", props.color),\n        ui.value.meter.size[props.size]\n      );\n    });\n    const meterAppearanceClass = computed(() => {\n      return twJoin(\n        ui.value.meter.appearance.inner,\n        ui.value.meter.appearance.meter,\n        ui.value.meter.appearance.bar,\n        ui.value.meter.appearance.value\n      );\n    });\n    const meterBarClass = computed(() => {\n      return twJoin(\n        ui.value.meter.bar.transition,\n        ui.value.meter.bar.ring,\n        ui.value.meter.bar.rounded,\n        ui.value.meter.bar.size[props.size]\n      );\n    });\n    const labelClass = computed(() => {\n      return twJoin(\n        ui.value.label.base,\n        ui.value.label.text,\n        ui.value.color[props.color] ?? ui.value.label.color.replaceAll(\"{color}\", props.color),\n        ui.value.label.size[props.size]\n      );\n    });\n    const normalizedMin = computed(() => props.min > props.max ? props.max : props.min);\n    const normalizedMax = computed(() => props.max < props.min ? props.min : props.max);\n    const percent = computed(() => clampPercent(Number(props.value), normalizedMin.value, normalizedMax.value));\n    return {\n      // eslint-disable-next-line vue/no-dupe-keys\n      ui,\n      attrs,\n      indicatorContainerClass,\n      indicatorClass,\n      meterClass,\n      meterAppearanceClass,\n      meterBarClass,\n      labelClass,\n      normalizedMin,\n      normalizedMax,\n      percent\n    };\n  }\n});\n\nimport { normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, mergeProps as _mergeProps, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createTextVNode as _createTextVNode, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = [\"value\", \"min\", \"max\"]\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_UIcon = __nuxt_component_0\n\n  return (_openBlock(), _createElementBlock(\"div\", _mergeProps({\n    class: _ctx.ui.wrapper\n  }, _ctx.attrs), [\n    (_ctx.indicator || _ctx.$slots.indicator)\n      ? _renderSlot(_ctx.$slots, \"indicator\", _normalizeProps(_mergeProps({ key: 0 }, { percent: _ctx.percent, value: _ctx.value })), () => [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass(_ctx.indicatorContainerClass),\n            style: _normalizeStyle({ width: `${_ctx.percent}%` })\n          }, [\n            _createElementVNode(\"div\", {\n              class: _normalizeClass(_ctx.indicatorClass)\n            }, _toDisplayString(Math.round(_ctx.percent)) + \"% \", 3)\n          ], 6)\n        ])\n      : _createCommentVNode(\"\", true),\n    _createElementVNode(\"meter\", {\n      value: _ctx.value,\n      min: _ctx.normalizedMin,\n      max: _ctx.normalizedMax,\n      class: _normalizeClass([_ctx.meterClass, _ctx.meterAppearanceClass, _ctx.meterBarClass])\n    }, null, 10, _hoisted_1),\n    (_ctx.label || _ctx.$slots.label)\n      ? _renderSlot(_ctx.$slots, \"label\", _normalizeProps(_mergeProps({ key: 1 }, { percent: _ctx.percent, value: _ctx.value })), () => [\n          _createElementVNode(\"div\", {\n            class: _normalizeClass(_ctx.labelClass)\n          }, [\n            (_ctx.icon)\n              ? (_openBlock(), _createBlock(_component_UIcon, {\n                  key: 0,\n                  name: _ctx.icon\n                }, null, 8, [\"name\"]))\n              : _createCommentVNode(\"\", true),\n            _createTextVNode(\" \" + _toDisplayString(_ctx.label), 1)\n          ], 2)\n        ])\n      : _createCommentVNode(\"\", true)\n  ], 16))\n}\n\n\nimport _export_sfc from '\u0000plugin-vue:export-helper'\nexport default /*#__PURE__*/_export_sfc(_sfc_main, [['render',_sfc_render]])",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1749812704625,
      "end": 1749812704625,
      "order": "normal"
    }
  ]
}
