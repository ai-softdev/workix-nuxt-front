{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/node_modules/date-fns/esm/eachMinuteOfInterval/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The step must be equal to or greater than 1\n * @throws {TypeError} 1 argument required\n * @returns {Date[]} the array with starts of minutes from the minute of the interval start to the minute of the interval end\n * @throws {RangeError} `options.step` must be a number equal to or greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport default function eachMinuteOfInterval(interval, options) {\n  var _options$step;\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n  var dates = [];\n  var currentDate = startDate;\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal to or greater than 1');\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n  return dates;\n}",
      "start": 1748346348890,
      "end": 1748346348922,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748346348922,
      "end": 1748346348922,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748346348922,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748346348923,
      "end": 1748346348923,
      "order": "normal"
    }
  ]
}
