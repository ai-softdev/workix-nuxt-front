{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/node_modules/date-fns/esm/getOverlappingDaysInIntervals/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 24 * 60 * 60 * 1000;\n\n/**\n * @name getOverlappingDaysInIntervals\n * @category Interval Helpers\n * @summary Get the number of days that overlap in two time intervals\n *\n * @description\n * Get the number of days that overlap in two time intervals\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link docs/Interval}\n * @returns {Number} the number of days that overlap in two time intervals\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals adds 1 for each started overlapping day:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> 3\n *\n * @example\n * // For non-overlapping time intervals returns 0:\n * getOverlappingDaysInIntervals(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> 0\n */\n\nexport default function getOverlappingDaysInIntervals(dirtyIntervalLeft, dirtyIntervalRight) {\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime();\n\n  // Throw an exception if start date is after end date or if any date is `Invalid Date`\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n  var isOverlapping = leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n  if (!isOverlapping) {\n    return 0;\n  }\n  var overlapStartDate = rightStartTime < leftStartTime ? leftStartTime : rightStartTime;\n  var overlapEndDate = rightEndTime > leftEndTime ? leftEndTime : rightEndTime;\n  var differenceInMs = overlapEndDate - overlapStartDate;\n  return Math.ceil(differenceInMs / MILLISECONDS_IN_DAY);\n}",
      "start": 1750909422098,
      "end": 1750909422174,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1750909422174,
      "end": 1750909422174,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1750909422174,
      "end": 1750909422175,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1750909422175,
      "end": 1750909422175,
      "order": "normal"
    }
  ]
}
