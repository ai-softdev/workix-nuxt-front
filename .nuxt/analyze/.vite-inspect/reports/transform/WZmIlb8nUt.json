{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/node_modules/date-fns/esm/set/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport toDate from \"../toDate/index.js\";\nimport setMonth from \"../setMonth/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name set\n * @category Common Helpers\n * @summary Set date values to a given date.\n *\n * @description\n * Set date values to a given date.\n *\n * Sets time values to date from object `values`.\n * A value is not set if it is undefined or null or doesn't exist in `values`.\n *\n * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts\n * to use native `Date#setX` methods. If you use this function, you may not want to include the\n * other `setX` functions that date-fns provides if you are concerned about the bundle size.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Object} values - an object with options\n * @param {Number} [values.year] - the number of years to be set\n * @param {Number} [values.month] - the number of months to be set\n * @param {Number} [values.date] - the number of days to be set\n * @param {Number} [values.hours] - the number of hours to be set\n * @param {Number} [values.minutes] - the number of minutes to be set\n * @param {Number} [values.seconds] - the number of seconds to be set\n * @param {Number} [values.milliseconds] - the number of milliseconds to be set\n * @returns {Date} the new date with options set\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `values` must be an object\n *\n * @example\n * // Transform 1 September 2014 into 20 October 2015 in a single line:\n * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })\n * //=> Tue Oct 20 2015 00:00:00\n *\n * @example\n * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:\n * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })\n * //=> Mon Sep 01 2014 12:23:45\n */\nexport default function set(dirtyDate, values) {\n  requiredArgs(2, arguments);\n  if (_typeof(values) !== 'object' || values === null) {\n    throw new RangeError('values parameter must be an object');\n  }\n  var date = toDate(dirtyDate);\n\n  // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date\n  if (isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n  if (values.year != null) {\n    date.setFullYear(values.year);\n  }\n  if (values.month != null) {\n    date = setMonth(date, values.month);\n  }\n  if (values.date != null) {\n    date.setDate(toInteger(values.date));\n  }\n  if (values.hours != null) {\n    date.setHours(toInteger(values.hours));\n  }\n  if (values.minutes != null) {\n    date.setMinutes(toInteger(values.minutes));\n  }\n  if (values.seconds != null) {\n    date.setSeconds(toInteger(values.seconds));\n  }\n  if (values.milliseconds != null) {\n    date.setMilliseconds(toInteger(values.milliseconds));\n  }\n  return date;\n}",
      "start": 1743013011196,
      "end": 1743013011276,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1743013011276,
      "end": 1743013011276,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1743013011276,
      "end": 1743013011276,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1743013011276,
      "end": 1743013011277,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1743013011277,
      "end": 1743013011277,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1743013011277,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1743013011278,
      "end": 1743013011278,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1743013011278,
      "end": 1743013011279,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1743013011279,
      "end": 1743013011279,
      "order": "normal"
    }
  ]
}
