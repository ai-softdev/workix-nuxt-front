{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/stores/cloud.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import axios from '~/composables/axios'\r\nimport {defineStore} from \"pinia\";\r\nimport {toast} from \"vue3-toastify\";\r\nimport {FileOperationPatternKind} from \"vscode-languageserver-protocol\";\r\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\r\nexport const useCloudStore = defineStore('cloud', {\r\n  state: () => ({\r\n    bin: {\r\n      folders: [],\r\n      files: [],\r\n    },\r\n    folder: {\r\n      name: '',\r\n      parent_id: '',\r\n      updated_at: '',\r\n      id: null,\r\n      folders: {\r\n        id: '',\r\n        name: ''\r\n      },\r\n      files: {\r\n        file_url: '',\r\n        name: '',\r\n        updated_at: ''\r\n      },\r\n    },\r\n    moveObject: {},\r\n    showObjectElem: false,\r\n    showAccessSetting: false,\r\n    hasFileInBin: false,\r\n    file: '',\r\n    src: '',\r\n    fileSizeInfo: false,\r\n    fileReadInfo: false,\r\n    fileChecked: false,\r\n    fileUpload: null,\r\n  }),\r\n  getters: {\r\n    get_hasFileInBin: (state) => state.hasFileInBin,\r\n    get_all_folders(folder) {\r\n      return this.folder\r\n    },\r\n    get_folder(folder) {\r\n      return this.folder\r\n    },\r\n    get_bin(folder) {\r\n      return this.bin\r\n    },\r\n    get_all_files(files) {\r\n      return this.folder.files\r\n    },\r\n  },\r\n  actions: {\r\n    async loadAllFolders() {\r\n      await axios.get(`file-manager/folder/main-folder`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.folder = response.data\r\n      })\r\n    },\r\n    async loadFolder(params: { id: number }): Promise<void> {\r\n      await axios.get(`file-manager/folder/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.folder = response.data\r\n      })\r\n    },\r\n\r\n    async loadFiles(params: { id: number }) {\r\n      await axios.get(`file-manager/files/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        this.folder.files = res.data\r\n      })\r\n    },\r\n\r\n    async loadhasFileInBin() {\r\n       await axios.get(`file-manager/bin`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        if (response.data.folders.length > 0 || response.data.files.length > 0) {\r\n          this.hasFileInBin = true\r\n        } else {\r\n          this.hasFileInBin = false\r\n        }\r\n      })\r\n    },\r\n\r\n    async loadBin(params: { bin?: any }) {\r\n      await axios.get(`file-manager/bin`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.bin = response.data\r\n        this.folder = this.bin\r\n      })\r\n    },\r\n\r\n    async moveToBin(params: { elem_type: any, elem_id: any }) {\r\n      await axios.delete(`file-manager/bin/move?${params.elem_type}=${params.elem_id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Перемещен в корзину', {theme: 'auto', autoClose: 1500})\r\n        this.hasFileInBin = true\r\n        if (this.folder.parent_id) {\r\n          this.loadFolder({id: this.folder.id})\r\n        } else if (!this.folder.parent_id) {\r\n          this.loadAllFolders()\r\n        }\r\n      })\r\n    },\r\n    async moveFromBin(params: { elem_type: any, elem_id: any }) {\r\n      await axios.delete(`file-manager/bin/move?${params.elem_type}=${params.elem_id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Успешно восстановлен', {theme: 'auto', autoClose: 1500})\r\n        this.hasFileInBin = true\r\n        this.folder = res.data\r\n        this.loadBin({bin: this.bin})\r\n      })\r\n    },\r\n\r\n\r\n    async deleteInBin(params: { delete_type: any, id: number }) {\r\n      await axios.delete(`file-manager/bin/delete?${params.delete_type}=${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Успешно удалён', {theme: \"auto\", autoClose: 1500})\r\n        this.folder = res.data\r\n        this.loadBin({bin: this.bin});\r\n      })\r\n    },\r\n    async delete(params: { id: number }) {\r\n      await axios.delete(`file-manager/folder-file/delete/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Успешно удалён', {theme: \"auto\", autoClose: 1500})\r\n        this.folder = res.data\r\n        this.loadBin({bin: this.bin});\r\n      })\r\n    },\r\n    async create_folder(params: { name: string, parent_id: number }) {\r\n      await axios.post(`file-manager/folder/create`, {\r\n        name: params.name,\r\n        parent_id: params.parent_id\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.folder = response.data\r\n        this.loadAllFolders()\r\n      })\r\n    },\r\n    async update_folder(params: { folder_id: number, name: any, parent_id: number }) {\r\n      await axios.patch(`file-manager/folder/update/${params.folder_id}`, {\r\n        name: params.name,\r\n        parent_id: params.parent_id\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        if (!this.folder.parent_id) {\r\n          this.loadAllFolders()\r\n        } else if (this.folder.parent_id) {\r\n          this.loadFolder({id: this.folder.id})\r\n        }\r\n        toast.success('Папка успешно изменена', {autoClose: 1500, theme: 'auto'})\r\n\r\n      })\r\n    },\r\n    async update_file(params: { file_id: number, name: any, folder_id: number }) {\r\n      await axios.patch(`file-manager/file/update/${params.file_id}`, {\r\n        name: params.name,\r\n        folder_id: params.folder_id\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        if (!this.folder.parent_id) {\r\n          this.loadAllFolders()\r\n        } else if (this.folder.parent_id) {\r\n          this.loadFolder({id: this.folder.id})\r\n        }\r\n        toast.success('Успешно изменён', {autoClose: 1500, theme: 'auto'})\r\n      })\r\n    }\r\n  }\r\n})",
      "start": 1748868802035,
      "end": 1748868802220,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1748868802221,
      "end": 1748868802221,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1748868802221,
      "end": 1748868802221,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1748868802221,
      "end": 1748868802221,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1748868802221,
      "end": 1748868802221,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1748868802221,
      "end": 1748868802221,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import axios from \"~/composables/axios\";\nimport { defineStore } from \"pinia\";\nimport { toast } from \"vue3-toastify\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useCloudStore = defineStore(\"cloud\", {\n  state: () => ({\n    bin: {\n      folders: [],\n      files: []\n    },\n    folder: {\n      name: \"\",\n      parent_id: \"\",\n      updated_at: \"\",\n      id: null,\n      folders: {\n        id: \"\",\n        name: \"\"\n      },\n      files: {\n        file_url: \"\",\n        name: \"\",\n        updated_at: \"\"\n      }\n    },\n    moveObject: {},\n    showObjectElem: false,\n    showAccessSetting: false,\n    hasFileInBin: false,\n    file: \"\",\n    src: \"\",\n    fileSizeInfo: false,\n    fileReadInfo: false,\n    fileChecked: false,\n    fileUpload: null\n  }),\n  getters: {\n    get_hasFileInBin: (state) => state.hasFileInBin,\n    get_all_folders(folder) {\n      return this.folder;\n    },\n    get_folder(folder) {\n      return this.folder;\n    },\n    get_bin(folder) {\n      return this.bin;\n    },\n    get_all_files(files) {\n      return this.folder.files;\n    }\n  },\n  actions: {\n    async loadAllFolders() {\n      await axios.get(`file-manager/folder/main-folder`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.folder = response.data;\n      });\n    },\n    async loadFolder(params) {\n      await axios.get(`file-manager/folder/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.folder = response.data;\n      });\n    },\n    async loadFiles(params) {\n      await axios.get(`file-manager/files/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.folder.files = res.data;\n      });\n    },\n    async loadhasFileInBin() {\n      await axios.get(`file-manager/bin`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        if (response.data.folders.length > 0 || response.data.files.length > 0) {\n          this.hasFileInBin = true;\n        } else {\n          this.hasFileInBin = false;\n        }\n      });\n    },\n    async loadBin(params) {\n      await axios.get(`file-manager/bin`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.bin = response.data;\n        this.folder = this.bin;\n      });\n    },\n    async moveToBin(params) {\n      await axios.delete(`file-manager/bin/move?${params.elem_type}=${params.elem_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        toast.success(\"Перемещен в корзину\", { theme: \"auto\", autoClose: 1500 });\n        this.hasFileInBin = true;\n        if (this.folder.parent_id) {\n          this.loadFolder({ id: this.folder.id });\n        } else if (!this.folder.parent_id) {\n          this.loadAllFolders();\n        }\n      });\n    },\n    async moveFromBin(params) {\n      await axios.delete(`file-manager/bin/move?${params.elem_type}=${params.elem_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        toast.success(\"Успешно восстановлен\", { theme: \"auto\", autoClose: 1500 });\n        this.hasFileInBin = true;\n        this.folder = res.data;\n        this.loadBin({ bin: this.bin });\n      });\n    },\n    async deleteInBin(params) {\n      await axios.delete(`file-manager/bin/delete?${params.delete_type}=${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        toast.success(\"Успешно удалён\", { theme: \"auto\", autoClose: 1500 });\n        this.folder = res.data;\n        this.loadBin({ bin: this.bin });\n      });\n    },\n    async delete(params) {\n      await axios.delete(`file-manager/folder-file/delete/${params.id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        toast.success(\"Успешно удалён\", { theme: \"auto\", autoClose: 1500 });\n        this.folder = res.data;\n        this.loadBin({ bin: this.bin });\n      });\n    },\n    async create_folder(params) {\n      await axios.post(`file-manager/folder/create`, {\n        name: params.name,\n        parent_id: params.parent_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        this.folder = response.data;\n        this.loadAllFolders();\n      });\n    },\n    async update_folder(params) {\n      await axios.patch(`file-manager/folder/update/${params.folder_id}`, {\n        name: params.name,\n        parent_id: params.parent_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        if (!this.folder.parent_id) {\n          this.loadAllFolders();\n        } else if (this.folder.parent_id) {\n          this.loadFolder({ id: this.folder.id });\n        }\n        toast.success(\"Папка успешно изменена\", { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async update_file(params) {\n      await axios.patch(`file-manager/file/update/${params.file_id}`, {\n        name: params.name,\n        folder_id: params.folder_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        if (!this.folder.parent_id) {\n          this.loadAllFolders();\n        } else if (this.folder.parent_id) {\n          this.loadFolder({ id: this.folder.id });\n        }\n        toast.success(\"Успешно изменён\", { autoClose: 1500, theme: \"auto\" });\n      });\n    }\n  }\n});\n",
      "start": 1748868802221,
      "end": 1748868802262,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/projects/nuxt/workix-nuxt-front/stores/cloud.ts"
        ],
        "sourcesContent": [
          "import axios from '~/composables/axios'\r\nimport {defineStore} from \"pinia\";\r\nimport {toast} from \"vue3-toastify\";\r\nimport {FileOperationPatternKind} from \"vscode-languageserver-protocol\";\r\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\r\nexport const useCloudStore = defineStore('cloud', {\r\n  state: () => ({\r\n    bin: {\r\n      folders: [],\r\n      files: [],\r\n    },\r\n    folder: {\r\n      name: '',\r\n      parent_id: '',\r\n      updated_at: '',\r\n      id: null,\r\n      folders: {\r\n        id: '',\r\n        name: ''\r\n      },\r\n      files: {\r\n        file_url: '',\r\n        name: '',\r\n        updated_at: ''\r\n      },\r\n    },\r\n    moveObject: {},\r\n    showObjectElem: false,\r\n    showAccessSetting: false,\r\n    hasFileInBin: false,\r\n    file: '',\r\n    src: '',\r\n    fileSizeInfo: false,\r\n    fileReadInfo: false,\r\n    fileChecked: false,\r\n    fileUpload: null,\r\n  }),\r\n  getters: {\r\n    get_hasFileInBin: (state) => state.hasFileInBin,\r\n    get_all_folders(folder) {\r\n      return this.folder\r\n    },\r\n    get_folder(folder) {\r\n      return this.folder\r\n    },\r\n    get_bin(folder) {\r\n      return this.bin\r\n    },\r\n    get_all_files(files) {\r\n      return this.folder.files\r\n    },\r\n  },\r\n  actions: {\r\n    async loadAllFolders() {\r\n      await axios.get(`file-manager/folder/main-folder`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.folder = response.data\r\n      })\r\n    },\r\n    async loadFolder(params: { id: number }): Promise<void> {\r\n      await axios.get(`file-manager/folder/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.folder = response.data\r\n      })\r\n    },\r\n\r\n    async loadFiles(params: { id: number }) {\r\n      await axios.get(`file-manager/files/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        this.folder.files = res.data\r\n      })\r\n    },\r\n\r\n    async loadhasFileInBin() {\r\n       await axios.get(`file-manager/bin`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        if (response.data.folders.length > 0 || response.data.files.length > 0) {\r\n          this.hasFileInBin = true\r\n        } else {\r\n          this.hasFileInBin = false\r\n        }\r\n      })\r\n    },\r\n\r\n    async loadBin(params: { bin?: any }) {\r\n      await axios.get(`file-manager/bin`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.bin = response.data\r\n        this.folder = this.bin\r\n      })\r\n    },\r\n\r\n    async moveToBin(params: { elem_type: any, elem_id: any }) {\r\n      await axios.delete(`file-manager/bin/move?${params.elem_type}=${params.elem_id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Перемещен в корзину', {theme: 'auto', autoClose: 1500})\r\n        this.hasFileInBin = true\r\n        if (this.folder.parent_id) {\r\n          this.loadFolder({id: this.folder.id})\r\n        } else if (!this.folder.parent_id) {\r\n          this.loadAllFolders()\r\n        }\r\n      })\r\n    },\r\n    async moveFromBin(params: { elem_type: any, elem_id: any }) {\r\n      await axios.delete(`file-manager/bin/move?${params.elem_type}=${params.elem_id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Успешно восстановлен', {theme: 'auto', autoClose: 1500})\r\n        this.hasFileInBin = true\r\n        this.folder = res.data\r\n        this.loadBin({bin: this.bin})\r\n      })\r\n    },\r\n\r\n\r\n    async deleteInBin(params: { delete_type: any, id: number }) {\r\n      await axios.delete(`file-manager/bin/delete?${params.delete_type}=${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Успешно удалён', {theme: \"auto\", autoClose: 1500})\r\n        this.folder = res.data\r\n        this.loadBin({bin: this.bin});\r\n      })\r\n    },\r\n    async delete(params: { id: number }) {\r\n      await axios.delete(`file-manager/folder-file/delete/${params.id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        toast.success('Успешно удалён', {theme: \"auto\", autoClose: 1500})\r\n        this.folder = res.data\r\n        this.loadBin({bin: this.bin});\r\n      })\r\n    },\r\n    async create_folder(params: { name: string, parent_id: number }) {\r\n      await axios.post(`file-manager/folder/create`, {\r\n        name: params.name,\r\n        parent_id: params.parent_id\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        this.folder = response.data\r\n        this.loadAllFolders()\r\n      })\r\n    },\r\n    async update_folder(params: { folder_id: number, name: any, parent_id: number }) {\r\n      await axios.patch(`file-manager/folder/update/${params.folder_id}`, {\r\n        name: params.name,\r\n        parent_id: params.parent_id\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(response => {\r\n        if (!this.folder.parent_id) {\r\n          this.loadAllFolders()\r\n        } else if (this.folder.parent_id) {\r\n          this.loadFolder({id: this.folder.id})\r\n        }\r\n        toast.success('Папка успешно изменена', {autoClose: 1500, theme: 'auto'})\r\n\r\n      })\r\n    },\r\n    async update_file(params: { file_id: number, name: any, folder_id: number }) {\r\n      await axios.patch(`file-manager/file/update/${params.file_id}`, {\r\n        name: params.name,\r\n        folder_id: params.folder_id\r\n      }, {\r\n        headers: {\r\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\r\n        }\r\n      }).then(res => {\r\n        if (!this.folder.parent_id) {\r\n          this.loadAllFolders()\r\n        } else if (this.folder.parent_id) {\r\n          this.loadFolder({id: this.folder.id})\r\n        }\r\n        toast.success('Успешно изменён', {autoClose: 1500, theme: 'auto'})\r\n      })\r\n    }\r\n  }\r\n})"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1748868802262,
      "end": 1748868802262,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1748868802263,
      "end": 1748868802263,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1748868802264,
      "end": 1748868802264,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1748868802264,
      "end": 1748868802264,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1748868802264,
      "end": 1748868802264,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1748868802264,
      "end": 1748868802266,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1748868802266,
      "end": 1748868802267,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1748868802267,
      "end": 1748868802267,
      "order": "normal"
    }
  ]
}
