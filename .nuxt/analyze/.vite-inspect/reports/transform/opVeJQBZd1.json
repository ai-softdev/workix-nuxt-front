{
  "resolvedId": "D:/projects/nuxt/workix-nuxt-front/stores/test.ts",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import {defineStore} from \"pinia\";\nimport {useAuthStore} from \"~/stores/auth\";\nimport {toast} from \"vue3-toastify\";\nimport axios from \"~/composables/axios\";\nimport type {Router} from \"vue-router\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useTestList = defineStore('test-list', {\n  state: () => ({\n    test: {},\n    testIQ: {},\n    testSpecial: {},\n    currentTest: {},\n    exam: {},\n  }),\n  getters: {\n    get_all_exam(exam) {\n      return this.exam\n    },\n    get_test(test) {\n      return this.test\n    },\n    get_current_test(currentTest) {\n      return this.currentTest\n    },\n    get_all_test(test) {\n      return this.test\n    },\n    get_test_iq(testIQ) {\n      return this.testIQ\n    },\n    get_test_special(testSpecial) {\n      return this.testSpecial\n    }\n  },\n  actions: {\n    async loadAllTest(params: { page: number, limit: number, usual?: number }) {\n      axios.get(`test/test-list?page=${params.page}&limit=${params.limit}&usual=${params.usual}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        if(params.usual !== 0) {\n          this.testIQ = response.data\n        } else {\n          this.testSpecial = response.data\n        }\n      })\n    },\n    async loadExam() {\n      axios.get(`exam/exam-list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.test = res.data\n      })\n    },\n    async loadCurrentTest() {\n      axios.get(`exam/current-test`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.currentTest = res.data\n      }).catch(e=>{\n        useAuthStore().exam_active = false\n      })\n    },\n\n    async testStart(params: { usual: any }, router: Router) {\n      axios.post(`exam/start`, {usual: params.usual}, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.test = res.data\n        this.loadCurrentTest()\n        useAuthStore().exam_active = true\n        useAuthStore().loadCurrentUser()\n        router.push('/base/tests/exam')\n      })\n    },\n    async testAnswer(params: { answer: any, test_id: any }, router: Router) {\n      axios.post(`exam/answer`, {\n        test_id: params.test_id,\n        answer: params.answer\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.loadCurrentTest()\n        useAuthStore().loadCurrentUser()\n      }).catch(e => {\n        router.push('/base/tests')\n      })\n    },\n    async createTest(params: { test: any, options: any, answer: any }) {\n      axios.post(`test/create`, {\n        answer_text: params.answer,\n        options_list: params.options,\n        question: params.test.question,\n        department_id: params.test.department_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.test = res.data\n        toast.success('Тест успешно создан', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async deleteTest(params: { test_id: number }) {\n      axios.delete(`test/delete/${params.test_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        toast.success('Тест успешно удалён', {autoClose: 1500, theme: 'auto'})\n        this.test = res.data\n        this.loadAllTest({page: 1, limit: 20})\n      }).catch(e => {\n        toast('Ошибка', {theme: \"auto\", autoClose: 1500})\n      })\n    }\n  }\n})\n",
      "start": 1746856007004,
      "end": 1746856007282,
      "sourcemaps": null
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746856007282,
      "end": 1746856007282,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746856007282,
      "end": 1746856007282,
      "order": "pre"
    },
    {
      "name": "unplugin-vue-i18n",
      "start": 1746856007282,
      "end": 1746856007282,
      "order": "pre"
    },
    {
      "name": "nuxt:client-fallback-auto-id",
      "start": 1746856007282,
      "end": 1746856007282,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1746856007283,
      "end": 1746856007283,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "result": "import { defineStore } from \"pinia\";\nimport { useAuthStore } from \"~/stores/auth\";\nimport { toast } from \"vue3-toastify\";\nimport axios from \"~/composables/axios\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useTestList = defineStore(\"test-list\", {\n  state: () => ({\n    test: {},\n    testIQ: {},\n    testSpecial: {},\n    currentTest: {},\n    exam: {}\n  }),\n  getters: {\n    get_all_exam(exam) {\n      return this.exam;\n    },\n    get_test(test) {\n      return this.test;\n    },\n    get_current_test(currentTest) {\n      return this.currentTest;\n    },\n    get_all_test(test) {\n      return this.test;\n    },\n    get_test_iq(testIQ) {\n      return this.testIQ;\n    },\n    get_test_special(testSpecial) {\n      return this.testSpecial;\n    }\n  },\n  actions: {\n    async loadAllTest(params) {\n      axios.get(`test/test-list?page=${params.page}&limit=${params.limit}&usual=${params.usual}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((response) => {\n        if (params.usual !== 0) {\n          this.testIQ = response.data;\n        } else {\n          this.testSpecial = response.data;\n        }\n      });\n    },\n    async loadExam() {\n      axios.get(`exam/exam-list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.test = res.data;\n      });\n    },\n    async loadCurrentTest() {\n      axios.get(`exam/current-test`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.currentTest = res.data;\n      }).catch((e) => {\n        useAuthStore().exam_active = false;\n      });\n    },\n    async testStart(params, router) {\n      axios.post(`exam/start`, { usual: params.usual }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.test = res.data;\n        this.loadCurrentTest();\n        useAuthStore().exam_active = true;\n        useAuthStore().loadCurrentUser();\n        router.push(\"/base/tests/exam\");\n      });\n    },\n    async testAnswer(params, router) {\n      axios.post(`exam/answer`, {\n        test_id: params.test_id,\n        answer: params.answer\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.loadCurrentTest();\n        useAuthStore().loadCurrentUser();\n      }).catch((e) => {\n        router.push(\"/base/tests\");\n      });\n    },\n    async createTest(params) {\n      axios.post(`test/create`, {\n        answer_text: params.answer,\n        options_list: params.options,\n        question: params.test.question,\n        department_id: params.test.department_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        this.test = res.data;\n        toast.success(\"Тест успешно создан\", { autoClose: 1500, theme: \"auto\" });\n      });\n    },\n    async deleteTest(params) {\n      axios.delete(`test/delete/${params.test_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData(\"token\")}`\n        }\n      }).then((res) => {\n        toast.success(\"Тест успешно удалён\", { autoClose: 1500, theme: \"auto\" });\n        this.test = res.data;\n        this.loadAllTest({ page: 1, limit: 20 });\n      }).catch((e) => {\n        toast(\"Ошибка\", { theme: \"auto\", autoClose: 1500 });\n      });\n    }\n  }\n});\n",
      "start": 1746856007283,
      "end": 1746856007479,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          "D:/projects/nuxt/workix-nuxt-front/stores/test.ts"
        ],
        "sourcesContent": [
          "import {defineStore} from \"pinia\";\nimport {useAuthStore} from \"~/stores/auth\";\nimport {toast} from \"vue3-toastify\";\nimport axios from \"~/composables/axios\";\nimport type {Router} from \"vue-router\";\nimport nuxtStorage from \"nuxt-storage/nuxt-storage\";\nexport const useTestList = defineStore('test-list', {\n  state: () => ({\n    test: {},\n    testIQ: {},\n    testSpecial: {},\n    currentTest: {},\n    exam: {},\n  }),\n  getters: {\n    get_all_exam(exam) {\n      return this.exam\n    },\n    get_test(test) {\n      return this.test\n    },\n    get_current_test(currentTest) {\n      return this.currentTest\n    },\n    get_all_test(test) {\n      return this.test\n    },\n    get_test_iq(testIQ) {\n      return this.testIQ\n    },\n    get_test_special(testSpecial) {\n      return this.testSpecial\n    }\n  },\n  actions: {\n    async loadAllTest(params: { page: number, limit: number, usual?: number }) {\n      axios.get(`test/test-list?page=${params.page}&limit=${params.limit}&usual=${params.usual}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(response => {\n        if(params.usual !== 0) {\n          this.testIQ = response.data\n        } else {\n          this.testSpecial = response.data\n        }\n      })\n    },\n    async loadExam() {\n      axios.get(`exam/exam-list`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.test = res.data\n      })\n    },\n    async loadCurrentTest() {\n      axios.get(`exam/current-test`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.currentTest = res.data\n      }).catch(e=>{\n        useAuthStore().exam_active = false\n      })\n    },\n\n    async testStart(params: { usual: any }, router: Router) {\n      axios.post(`exam/start`, {usual: params.usual}, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.test = res.data\n        this.loadCurrentTest()\n        useAuthStore().exam_active = true\n        useAuthStore().loadCurrentUser()\n        router.push('/base/tests/exam')\n      })\n    },\n    async testAnswer(params: { answer: any, test_id: any }, router: Router) {\n      axios.post(`exam/answer`, {\n        test_id: params.test_id,\n        answer: params.answer\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.loadCurrentTest()\n        useAuthStore().loadCurrentUser()\n      }).catch(e => {\n        router.push('/base/tests')\n      })\n    },\n    async createTest(params: { test: any, options: any, answer: any }) {\n      axios.post(`test/create`, {\n        answer_text: params.answer,\n        options_list: params.options,\n        question: params.test.question,\n        department_id: params.test.department_id\n      }, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        this.test = res.data\n        toast.success('Тест успешно создан', {autoClose: 1500, theme: 'auto'})\n      })\n    },\n    async deleteTest(params: { test_id: number }) {\n      axios.delete(`test/delete/${params.test_id}`, {\n        headers: {\n          Authorization: `Bearer ${nuxtStorage.localStorage.getData('token')}`\n        }\n      }).then(res => {\n        toast.success('Тест успешно удалён', {autoClose: 1500, theme: 'auto'})\n        this.test = res.data\n        this.loadAllTest({page: 1, limit: 20})\n      }).catch(e => {\n        toast('Ошибка', {theme: \"auto\", autoClose: 1500})\n      })\n    }\n  }\n})\n"
        ],
        "mappings": "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",
        "names": []
      }
    },
    {
      "name": "vite:json",
      "start": 1746856007479,
      "end": 1746856007479,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746856007479,
      "end": 1746856007479,
      "order": "normal"
    },
    {
      "name": "vite:vue",
      "start": 1746856007480,
      "end": 1746856007480,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746856007480,
      "end": 1746856007480,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746856007480,
      "end": 1746856007480,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "nuxt:chunk-error",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1746856007481,
      "end": 1746856007481,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746856007482,
      "end": 1746856007482,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746856007482,
      "end": 1746856007482,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746856007482,
      "end": 1746856007482,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "start": 1746856007482,
      "end": 1746856007482,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746856007483,
      "end": 1746856007483,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746856007483,
      "end": 1746856007483,
      "order": "normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746856007484,
      "end": 1746856007484,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-macros-transform",
      "start": 1746856007485,
      "end": 1746856007485,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-resource",
      "start": 1746856007486,
      "end": 1746856007486,
      "order": "post"
    },
    {
      "name": "nuxtjs:i18n-meta-deprecation",
      "start": 1746856007487,
      "end": 1746856007487,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746856007487,
      "end": 1746856007490,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746856007491,
      "end": 1746856007491,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746856007491,
      "end": 1746856007491,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746856007492,
      "end": 1746856007492,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746856007492,
      "end": 1746856007492,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746856007493,
      "end": 1746856007493,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746856007493,
      "end": 1746856007494,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746856007494,
      "end": 1746856007494,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746856007494,
      "end": 1746856007494,
      "order": "normal"
    }
  ]
}
